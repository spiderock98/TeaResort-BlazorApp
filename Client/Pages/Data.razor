@page "/data"

<div class="content-wrapper">
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col text-center">
                    <h1 style="font-size:50px;">Data</h1>
                </div>
            </div>
        </div>
    </section>
    <section class="content">
        <div class="container-fluid">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" KeepPanelsAlive="keepPanelsAlive" ActivePanelIndex="activePanelIndex" ActivePanelIndexChanged="async (i) => await ActivePanelIndexChanged(i)">
                <MudTabPanel Text="Day">
                    <div class="chart-container" style="height: 70vh;">
                        <canvas id="dayChart"></canvas>
                    </div>
                </MudTabPanel>
                <MudTabPanel Text="Month">
                    <div class="chart-container" style="height: 70vh;">
                        <canvas id="monthChart"></canvas>
                    </div>
                </MudTabPanel>
                <MudTabPanel Text="Year">
                    <div class="chart-container" style="height: 70vh;">
                        <canvas id="yearChart"></canvas>
                    </div>
                </MudTabPanel>
            </MudTabs>
        </div>
    </section>
</div>

@code {
    private int activePanelIndex = 0;
    private bool keepPanelsAlive = true;
    private string AccessToken = string.Empty;

    private Tuple<int, string>[] test = new[] {
        new(1, "one"),
        new(2, "two")
    }

    private DataChartModel dataChart { get; set; } = new();
    private List<DataChartModel> dataCharts { get; set; } = new();

    private List<DeviceModel> devices { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        //await GetDevices();
        //await GetChart();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        //await JSRuntime.InvokeVoidAsync("DayChart");
        //await JSRuntime.InvokeVoidAsync("MonthChart");

    }

    private async Task GetDevices()
    {
        AccessToken = await localStorage.GetItemAsync<string>("token");
        devices = await DeviceService.GetOwnerDevicesListAsync(AccessToken);


    }

    private async Task GetChart()
    {
        dataChart.ChartT = Models.ChartType.Year;
        dataChart.StackDevices = devices;
        dataChart.Time = new DateTime(2022, 01, 01);

        dataCharts = await dataChart.GetEnergyByYear(AccessToken);
    }

    private async Task ActivePanelIndexChanged(int index)
    {
        if (index == 2)
        {
            activePanelIndex = index;
            //StateHasChanged();
            await JSRuntime.InvokeVoidAsync("YearChart", test);
            Console.WriteLine(activePanelIndex);
        }
    }
}
