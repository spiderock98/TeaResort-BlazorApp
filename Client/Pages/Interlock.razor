@page "/interlock"
@inject NavigationManager uriHelper
@using BlazorDateRangePicker
@using Helper
@inject IJSRuntime JSHelper
@using SmartRetail.Shared
@using SmartRetail.Services
@using Share.Models
@using System.Collections
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavHelper
@using System


<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col text-center">
                    <h1 style="font-size:50px;">Interlock Profiles</h1>
                </div>
            </div><!-- /.row -->
        </div><!-- /.container-fluid -->
    </section>
    <!-- /.content-header -->
    <!-- Main content -->
    <section class="content">
        <div class="container-fluid">

            <div class="card card-primary">
                <div class="card-body">
                    <button class="btn btn-success m-2"
                            type="button"
                            data-toggle="modal"
                            data-target="#mdNewScene"
                            @onclick="PreNew">
                        Add New Schedule
                    </button>

                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr class="text-center">
                                    <th>No.</th>
                                    <th>NAME</th>
                                    <th>ENABLE</th>
                                    <th>IS SCRIPT</th>
                                    <th>LAST RUN</th>
                                    <th>CONTROL</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    foreach (var profile in LstScene)
                                    {
                                        <tr class="text-center">
                                            <th>@profile.Id</th>
                                            <td>@profile.Name</td>
                                            @{ if (profile.Enable)
                                                {
                                                    <td>
                                                        <span class="badge badge-pill badge-success">Enable</span>

                                                    </td>
                                                }
                                                else
                                                {
                                                    <td>
                                                        <span class="badge badge-pill badge-danger">Disable</span>
                                                    </td>
                                                }
                                            }
                                            <td>@profile.IsJavaScriptType</td>
                                            <td>@UnixTime.UnixMillisToLocalTimeFormat(profile.LastRunTime)</td>
                                            <td>
                                                <div class="d-flex flex-wrap">
                                                    <button class="btn btn-xs btn-primary m-1"
                                                            type="button"
                                                            data-toggle="modal"
                                                            data-target="#mdEditSchedule"
                                                            @onclick=@(() => { PreEdit(profile); })>
                                                        <i class="fas fa-pen-alt"></i>
                                                    </button>

                                                    @*  
                                                    <button class="btn btn-xs btn-danger m-1"
                                                            @onclick=@(() => { DeleteItemHandle(profile); })>
                                                        <i class="fas fa-trash-alt"></i>
                                                    </button>

                                                    @{
                                                        string attrBtnEnable = profile.Enable ? "light" : "success";
                                                        var titleTooltip = profile.Enable ? "Disable Schedule" : "Enable Schedule";
                                                    }
                                                    <button data-toggle="tooltip"
                                                            data-placement="top"
                                                            title="@titleTooltip" class="btn btn-xs btn-@attrBtnEnable m-1"
                                                            @onclick=@(() => { ChangeScheduleStateHandle(profile); })>
                                                        <i class="fas fa-power-off"></i>
                                                    </button>
                                                    *@
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>

                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->
            <!-- Modal New Schedule -->
            <div class="modal fade" data-backdrop="static" id="mdNewScene" tabindex="-1">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h2 class="modal-title">
                                Create Interlock Profile
                            </h2>

                            <button type="button" class="close" data-dismiss="modal"
                                    aria-label="Close"
                                    @onclick=@(() => { FormNewClose(); })>
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <form @ref="elFormNewSchedule"
                                  class="needs-validation"
                                  id="formNewWorker"
                                  novalidate>

                                <fieldset class="border p-2">
                                    <legend class="w-auto">Basic Info</legend>

                                    <div class="form-group row">
                                        <label class="col-sm-2 col-form-label">
                                            <i class="fas fa-info-circle"></i>
                                            Interlock Name
                                        </label>
                                        <div class="col-sm-10">
                                            <input @bind-value="NewSceneParams.Name"
                                                   type="text"
                                                   class="form-control"
                                                   required />
                                        </div>
                                    </div>

                                    @*<div class="form-group row">
                                        <label class="col-sm-2 col-form-label">
                                            <i class="fas fa-clock"></i>
                                            Occurred In Time
                                        </label>
                                        <div class="col-sm-10">
                                            <DateRangePicker class="form-control"
                                                             SingleDatePicker="true"
                                                             TimePicker="true"
                                                             TimePicker24Hour="true"
                                                             DateFormat="dddd dd/MM/yyyy - hh:mm tt"
                                                             @bind-StartDate="crDatetimeBinding"
                                                             required />
                                        </div>
                                    </div>*@
                                </fieldset>


                                <fieldset class="border p-2">
                                    <legend class="w-auto">
                                        <h2 class="font-weight-bolder font-italic">IF</h2>
                                    </legend>

                                    <div class="container-fluid">
                                        <div class="row">
                                            <button class="btn btn-outline-primary m-1">Export Configure</button>
                                            <button class="btn btn-outline-primary m-1">Import Configure</button>
                                        </div>

                                        @foreach (var _express in NewSceneParams.Expressions)
                                        {
                                            int idx = NewSceneParams.Expressions.IndexOf(_express);

                                            <div class="row align-items-center">
                                                @*show the delete expression button*@
                                                <div class="col-auto">
                                                    <button class="btn btn-danger btn-sm"
                                                            type="button"
                                                            @onclick=@(() => { NewSceneParams.Expressions.Remove(_express); })>
                                                        <i class="fas fa-trash-alt"></i>
                                                    </button>
                                                </div>

                                                @if (_express.IsLogicExpression == true)
                                                {
                                                    if (_express.Logic == LogicExpression.OpenpArenthesis)
                                                    {
                                                        <div class="col-auto">
                                                            <img src="public/img/bracket_left.png" style="background:green;" />
                                                        </div>
                                                    }
                                                    else if (_express.Logic == LogicExpression.CloseParenthesis)
                                                    {
                                                        <div class="col-auto">
                                                            <img src="public/img/bracket_right.png" style="background:green;" />
                                                        </div>
                                                    }
                                                    else if (_express.Logic == LogicExpression.And)
                                                    {
                                                        <div class="col-auto">
                                                            <h3>AND</h3>
                                                        </div>
                                                    }
                                                    else if (_express.Logic == LogicExpression.Or)
                                                    {
                                                        <div class="col-auto">
                                                            <h3>OR</h3>
                                                        </div>
                                                    }
                                                    else if (_express.Logic == LogicExpression.Not)
                                                    {
                                                        <div class="col-auto">
                                                            <h3>NOT</h3>
                                                        </div>
                                                    }

                                                    <div class="col-3">
                                                        <select title="-- Change --"
                                                                id="slNewCondLogicExpress-@idx"
                                                                data-style="btn-light btn-sm"
                                                                class="form-control selectpicker"
                                                                @onchange=@(async()=>
                                                                                    {
                                                                                       var _tmpKey =  await SelectAndBindSingle();
                                                                                        NewSceneParams.Expressions.ElementAtOrDefault(idx).Logic = (LogicExpression)_tmpKey;
                                                                                    })>
                                                            @foreach (var obj in Enum.GetValues(typeof(LogicExpression)))
                                                            {
                                                                var value = Enum.GetName(typeof(LogicExpression), obj);
                                                                var key = (int)obj;
                                                                <option value="@key">@value</option>
                                                            }
                                                        </select>
                                                    </div>
                                                }
                                                else if (_express.IsLogicExpression == false)
                                                {
                                                    var _objDevice = LstDevice.Where(r => r.Id == _express.DeviceId).FirstOrDefault();

                                                    <div class="col-3">
                                                        <div class="info-box">
                                                            <span class="info-box-icon bg-success">@_objDevice.Capabilitie</span>
                                                            <div class="info-box-content">
                                                                <span class="info-box-text">@_objDevice.Id</span>
                                                                <span class="info-box-number">@_objDevice.Name</span>
                                                                <span class="info-box-number">
                                                                    <select title="-- Change --"
                                                                            id="slNewCondDevice-@idx"
                                                                            data-style="btn-light btn-sm"
                                                                            class="form-control selectpicker"
                                                                            data-live-search="true"
                                                                            @onchange=@(async()=>
                                                                                    {
                                                                                       var _tmpKey =  await SelectAndBindSingle();
                                                                                        NewSceneParams.Expressions.ElementAtOrDefault(idx).DeviceId = _tmpKey;
                                                                                    })>
                                                                        @foreach (var _dv in LstDevice)
                                                                        {
                                                                            <option value="@_dv.Id">@_dv.Id - @_dv.Name</option>
                                                                        }
                                                                    </select>
                                                                </span>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-2">
                                                        <div class="info-box">
                                                            <span class="info-box-icon bg-success">
                                                                <i class="@GetCompareSign(NewSceneParams.Expressions.ElementAtOrDefault(idx).Comparison)"></i>
                                                            </span>
                                                            <div class="info-box-content">
                                                                <select title="-- Change --"
                                                                        id="slNewCondOperator-@idx"
                                                                        data-style="btn-light btn-sm"
                                                                        class="form-control selectpicker"
                                                                        @onchange=@(async()=>
                                                                                    {
                                                                                       var _tmpKey =  await SelectAndBindSingle();
                                                                        NewSceneParams.Expressions.ElementAtOrDefault(idx).Comparison = (MasterDataModel.CompareOperators)_tmpKey;
                                                                    })>
                                                                    @foreach (var obj in Enum.GetValues(typeof(MasterDataModel.CompareOperators)))
                                                                    {
                                                                        var value = Enum.GetName(typeof(MasterDataModel.CompareOperators), obj);
                                                                        var key = (int)obj;
                                                                        <option value="@key">@value</option>
                                                                    }
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-3">
                                                        <div class="info-box">
                                                            <span class="info-box-icon bg-success">
                                                                Value
                                                            </span>
                                                            <div class="info-box-content">
                                                                <select title="-- Select Attribute --"
                                                                        id="slNewCondDeviceAttr-@idx"
                                                                        data-style="btn-light btn-sm"
                                                                        class="form-control selectpicker mb-2"
                                                                        data-live-search="true"
                                                                        required
                                                                        @onchange=@(async()=>
                                                                                    {
                                                                                        var _tmpKey = await SelectAndBindSingleTextReturn();
                                                                                        NewSceneParams.Expressions.ElementAtOrDefault(idx).Attribute = _tmpKey;
                                                                                    })>

                                                                    @{
                                                                        var _dictDvAttr = LstDevice.Where(r => r.Id == _express.DeviceId).FirstOrDefault().Status;
                                                                        foreach (var DvAttr in _dictDvAttr)
                                                                        {
                                                                            <option value="@DvAttr.Key">@DvAttr.Key</option>
                                                                        }
                                                                    }
                                                                </select>

                                                                @{
                                                                    var _DetailOfAttr = LstAttribute.Where(r => r.Name == NewSceneParams.Expressions.ElementAtOrDefault(idx).Attribute).FirstOrDefault();
                                                                    if (_DetailOfAttr != default)
                                                                    {
                                                                        if (_DetailOfAttr.ValueType == SERVER_TYPES.Enum || _DetailOfAttr.ValueType == SERVER_TYPES.Array)
                                                                        {
                                                                            <select class="form-control"
                                                                                    required
                                                                                    id=@("slNewCondDeviceAttr" + _DetailOfAttr.Name + "-" + idx)
                                                                                    @onchange=@(async () =>
                                                                                            {
                                                                                                var _tmpKey = await jQuerySelectAndBindSingleTextReturn();
                                                                                               NewSceneParams.Expressions.ElementAtOrDefault(idx).CompareValue = _tmpKey;
                                                                                            })>

                                                                                @foreach (var _valRange in _DetailOfAttr.ValueRange)
                                                                                {
                                                                                    <option value="@_valRange">
                                                                                        @_valRange
                                                                                    </option>
                                                                                }
                                                                            </select>
                                                                        }
                                                                        else if (_DetailOfAttr.ValueType == SERVER_TYPES.Double)
                                                                        {
                                                                            <input class="form-control"
                                                                                   type="number"
                                                                                   @bind-value="@NewSceneParams.Expressions.ElementAtOrDefault(idx).CompareValue"
                                                                                   required
                                                                                   step="0.01"
                                                                                   min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                   max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                        }
                                                                        else if (_DetailOfAttr.ValueType == SERVER_TYPES.String)
                                                                        {
                                                                            <input class="form-control"
                                                                                   type="text"
                                                                                   @bind-value="@NewSceneParams.Expressions.ElementAtOrDefault(idx).CompareValue" />
                                                                        }
                                                                        else if (_DetailOfAttr.ValueType == SERVER_TYPES.Integer)
                                                                        {
                                                                            <input class="form-control"
                                                                                   type="number"
                                                                                   @bind-value="@NewSceneParams.Expressions.ElementAtOrDefault(idx).CompareValue"
                                                                                   step="1"
                                                                                   required
                                                                                   min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                   max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                        }
                                                                    }
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-3">
                                                        <div class="info-box">
                                                            <span class="info-box-icon bg-success">
                                                                <i class="fas fa-stopwatch"></i>
                                                            </span>
                                                            <div class="info-box-content">
                                                                <div class="input-group input-group-sm">
                                                                    <input type="number"
                                                                           class="form-control"
                                                                           min="0"
                                                                           step="1"
                                                                           placeholder="Interval Time"
                                                                           required
                                                                           @bind-value="NewSceneParams.Expressions.ElementAtOrDefault(idx).Interval">
                                                                    <div class="input-group-append">
                                                                        <span class="input-group-text">
                                                                            sec
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                }
                                            </div>
                                        }

                                        <div class="dropdown">
                                            <button class="btn btn-success dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                <i class="fas fa-plus-circle"></i>
                                            </button>

                                            <ul class="dropdown-menu">
                                                <li>
                                                    <a class="dropdown-item btn d-flex">
                                                        <div class="flex-grow-1">COMMAND</div>
                                                        <i class="fas fa-chevron-right"></i>
                                                    </a>
                                                    <ul class="submenu dropdown-menu">
                                                        <li>
                                                            <a class="dropdown-item btn"
                                                               @onclick=@(() =>
                                                               {
                                                                   NewSceneParams.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = true, Logic = LogicExpression.And });
                                                                   InvokeAsync(StateHasChanged);
                                                               })>
                                                                And
                                                            </a>
                                                        </li>

                                                        <li>
                                                            <a class="dropdown-item btn"
                                                               @onclick=@(() =>
                                                               {
                                                                   NewSceneParams.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = true, Logic = LogicExpression.Or });
                                                                   InvokeAsync(StateHasChanged);
                                                               })>
                                                                Or
                                                            </a>
                                                        </li>

                                                        <li>
                                                            <a class="dropdown-item btn"
                                                               @onclick=@(() =>
                                                               {
                                                                   NewSceneParams.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = true, Logic = LogicExpression.Not });
                                                                   InvokeAsync(StateHasChanged);
                                                               })>
                                                                Not
                                                            </a>
                                                        </li>

                                                        <li>
                                                            <a class="dropdown-item btn"
                                                               @onclick=@(() =>
                                                               {
                                                                   NewSceneParams.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = true, Logic = LogicExpression.OpenpArenthesis });
                                                                   InvokeAsync(StateHasChanged);
                                                               })>
                                                                OpenpArenthesis
                                                            </a>
                                                        </li>

                                                        <li>
                                                            <a class="dropdown-item btn"
                                                               @onclick=@(() =>
                                                               {
                                                                   NewSceneParams.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = true, Logic = LogicExpression.CloseParenthesis });
                                                                   InvokeAsync(StateHasChanged);
                                                               })>
                                                                CloseArenthesis
                                                            </a>
                                                        </li>
                                                    </ul>
                                                </li>

                                                <li>
                                                    <a class="dropdown-item btn d-flex">
                                                        <div class="flex-grow-1">TRIGGER BLOCK</div>
                                                        <i class="fas fa-chevron-right"></i>
                                                    </a>
                                                    <ul class="submenu dropdown-menu">
                                                        @* AREA Level *@
                                                        <li>
                                                            @{
                                                                var LstAreaLV1 = LstArea;
                                                                var numOfAreaLV1 = LstAreaLV1.Count;
                                                            }
                                                            <a class="dropdown-item btn d-flex">
                                                                <div class="flex-grow-1">Area</div>
                                                                @if (numOfAreaLV1 > 0)
                                                                {
                                                                    <span class="badge badge-pill badge-success">@LstAreaLV1.Count</span>
                                                                }
                                                            </a>
                                                            @if (numOfAreaLV1 > 0)
                                                            {
                                                                <ul class="submenu dropdown-menu">
                                                                    @{
                                                                        foreach (var _area in LstAreaLV1)
                                                                        {
                                                                            var _LstZoneIdInAreaItem = LstZone.Where(r => r.Area == _area.Id).Select(x => x.Id).ToList();
                                                                            var _LstSectionIdInZoneItem = LstSection.Where(r => _LstZoneIdInAreaItem.Contains(r.Zone)).Select(x => x.Id).ToList();
                                                                            var LstAreaLV2 = LstDevice.Where(r => _LstSectionIdInZoneItem.Contains(r.SectionId)).ToList();
                                                                            var numOfAreaLV2 = LstAreaLV2.Count;
                                                                            <li>
                                                                                <a class="dropdown-item btn d-flex">
                                                                                    <div class="flex-grow-1">@_area.Name</div>
                                                                                    @if (numOfAreaLV2 > 0)
                                                                                    {
                                                                                        <span class="badge badge-pill badge-success">@numOfAreaLV2</span>
                                                                                    }
                                                                                </a>
                                                                                @if (numOfAreaLV2 > 0)
                                                                                {
                                                                                    <ul class="submenu dropdown-menu">
                                                                                        @foreach (var _device in LstAreaLV2)
                                                                                        {
                                                                                            <li>
                                                                                                <a class="dropdown-item btn"
                                                                                                   @onclick=@(()=>
                                                                                                   {
                                                                                                       NewSceneParams.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = false, DeviceId = _device.Id, Comparison= MasterDataModel.CompareOperators.Equal });
                                                                                                   })> @_device.Name </a>
                                                                                            </li>
                                                                                        }
                                                                                    </ul>
                                                                                }
                                                                            </li>
                                                                        }
                                                                    }
                                                                </ul>
                                                            }

                                                        </li>

                                                        @* ZONE Level *@
                                                        <li>
                                                            @{
                                                                var LstZoneLV1 = LstZone;
                                                                var numOfZoneLV1 = LstZoneLV1.Count;
                                                            }
                                                            <a class="dropdown-item btn d-flex">

                                                                <div class="flex-grow-1">Zone</div>
                                                                @if (numOfZoneLV1 > 0)
                                                                {
                                                                    <span class="badge badge-pill badge-success">@numOfZoneLV1</span>
                                                                }
                                                            </a>
                                                            @if (numOfZoneLV1 > 0)
                                                            {
                                                                <ul class="submenu dropdown-menu">
                                                                    @{
                                                                        foreach (var _zone in LstZoneLV1)
                                                                        {
                                                                            var _LstSectionIdInZoneItem = LstSection.Where(r => r.Zone == _zone.Id).Select(x => x.Id).ToList();
                                                                            var LstZoneLV2 = LstDevice.Where(r => _LstSectionIdInZoneItem.Contains(r.SectionId)).ToList();
                                                                            var numOfZoneLV2 = LstZoneLV2.Count;
                                                                            <li>
                                                                                <a class="dropdown-item btn d-flex">
                                                                                    <div class="flex-grow-1"> @_zone.Name </div>
                                                                                    @if (numOfZoneLV2 > 0)
                                                                                    {
                                                                                        <span class="badge badge-pill badge-success">@numOfZoneLV2</span>
                                                                                    }
                                                                                </a>
                                                                                @if (numOfZoneLV2 > 0)
                                                                                {
                                                                                    <ul class="submenu dropdown-menu">

                                                                                        @foreach (var _device in LstZoneLV2)
                                                                                        {
                                                                                            <li>
                                                                                                <a class="dropdown-item btn"
                                                                                                   @onclick=@(()=>
                                                                                                   {
                                                                                                       NewSceneParams.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = false, DeviceId = _device.Id, Comparison= MasterDataModel.CompareOperators.Equal });
                                                                                                   })> @_device.Name </a>
                                                                                            </li>
                                                                                        }
                                                                                    </ul>
                                                                                }
                                                                            </li>
                                                                        }
                                                                    }
                                                                </ul>
                                                            }

                                                        </li>

                                                        @* ROOM Level *@
                                                        <li>
                                                            @{
                                                                var LstSectionLV1 = LstSection;
                                                                var numOfSectionLV1 = LstSectionLV1.Count;
                                                            }
                                                            <a class="dropdown-item btn d-flex">
                                                                <div class="flex-grow-1">Room</div>
                                                                @if (numOfSectionLV1 > 0)
                                                                {
                                                                    <span class="badge badge-pill badge-success">@numOfSectionLV1</span>
                                                                }

                                                            </a>
                                                            @if (numOfSectionLV1 > 0)
                                                            {
                                                                <ul class="submenu dropdown-menu">
                                                                    @{
                                                                        foreach (var _section in LstSectionLV1)
                                                                        {
                                                                            var LstSectionLV2 = LstDevice.Where(r => r.SectionId == _section.Id).ToList();
                                                                            var numOfSectionLV2 = LstSectionLV2.Count;
                                                                            <li>
                                                                                <a class="dropdown-item btn d-flex">
                                                                                    <div class="flex-grow-1">@_section.Name</div>
                                                                                    @if (numOfSectionLV2 > 0)
                                                                                    {
                                                                                        <span class="badge badge-pill badge-success">@numOfSectionLV2</span>
                                                                                    }
                                                                                </a>
                                                                                @if (numOfSectionLV2 > 0)
                                                                                {
                                                                                    <ul class="submenu dropdown-menu">
                                                                                        @foreach (var _device in LstSectionLV2)
                                                                                        {
                                                                                            <li>
                                                                                                <a class="dropdown-item btn"
                                                                                                   @onclick=@(()=>
                                                                                                   {
                                                                                                       NewSceneParams.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = false, DeviceId = _device.Id, Comparison= MasterDataModel.CompareOperators.Equal });
                                                                                                   })> @_device.Name </a>
                                                                                            </li>
                                                                                        }
                                                                                    </ul>
                                                                                }
                                                                            </li>
                                                                        }
                                                                    }
                                                                </ul>
                                                            }

                                                        </li>
                                                    </ul>
                                                </li>
                                            </ul>
                                        </div>


                                    </div>
                                </fieldset>

                                <fieldset class="border p-2">
                                    <legend class="w-auto">
                                        <h2 class="font-weight-bolder font-italic">THEN</h2>
                                    </legend>

                                    <div class="row">
                                        <button class="btn btn-success m-3 btn-block"
                                                type="button"
                                                @onclick=@(() => { NewSceneParams.Actions.Add(new RunningActionModel()); InvokeAsync(StateHasChanged); })>
                                            <i class="fas fa-plus-circle"></i>
                                            ADD NEW ACTIONS
                                        </button>
                                    </div>

                                    @*@foreach (var cardNew in crNewLstAddActions)*@
                                    @foreach (var _card in NewSceneParams.Actions)
                                    {
                                        <div class="callout callout-primary">
                                            <div class="mb-4 d-flex">
                                                <h4 class="mr-auto">
                                                    <span class="badge badge-pill badge-primary">NEW</span>
                                                    @*<span class="badge badge-pill badge-primary">#@cardNew.ActionObj.DeviceId</span>*@
                                                </h4>

                                                <button class="btn btn-outline-danger"
                                                        type="button"
                                                        @onclick=@(() => 
                                                                   { 
                                                                       NewSceneParams.Actions.Remove(_card);
                                                                   })>
                                                    <i class="far fa-trash-alt"></i>
                                                </button>
                                            </div>

                                            <div class="row">

                                                <div class="form-group col-4">
                                                    <label>
                                                        Target Devices
                                                    </label>
                                                    <div class="input-group ">
                                                        <select class="selectpicker form-control"
                                                                title="-- Select --"
                                                                data-style="btn-primary"
                                                                data-live-search="true"
                                                                multiple
                                                                @onchange=@(async () => 
                                                                            { 
                                                                                SelectAndBindMultiTargetDevice(FormAction.NewTargetDevice, _card);
                                                                            })>
                                                            @foreach (var _dv in LstDevice.Where(r=>r.DeviceType == "AC"))
                                                            {
                                                                <option value="@_dv.Id">[@_dv.Capabilitie] @_dv.Name</option>
                                                            }
                                                        </select>
                                                    </div>
                                                </div>

                                                @{
                                                    var _dvType = String.Empty;
                                                    _dvType = @LstDevice.Where(r => r.Id == _card?.LstDeviceId.FirstOrDefault()).FirstOrDefault()?.DeviceType;
                                                }
                                                @*<div class="col-8">
                                                    <div class="callout callout-primary">
                                                        <div class="d-flex">
                                                            <div class=" flex-grow-1">
                                                                <h3>Device Type </h3>
                                                            </div>
                                                            <div>
                                                                <span class="badge badge-pill badge-primary">
                                                                    <h4>@_dvType</h4>
                                                                </span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>*@

                                                <div class="col-12">
                                                    <hr class="dotted">
                                                </div>


                                                <div class="card col-12">
                                                    <div class="card-header">
                                                        <select title="-- Select Attributes --"
                                                                data-style="btn-primary"
                                                                class="form-control selectpicker"
                                                                multiple
                                                                data-actions-box="true"
                                                                data-live-search="true"
                                                                @onchange=@(async()=> { await SelectAndBindMultiAttr(_card.SetValues);  })>
                                                            @{
                                                                if (_dvType != String.Empty && _dvType != "" && _dvType != null)
                                                                {
                                                                    var _lstAttrOfDvType = LstDeviceType.Where(r => r.Name == _dvType).FirstOrDefault().Attributes;
                                                                    foreach (var _attr in _lstAttrOfDvType)
                                                                    {
                                                                        <option value="@_attr">@_attr</option>
                                                                    }
                                                                }
                                                            }
                                                        </select>
                                                    </div>
                                                    <div class="card-body">
                                                        <div class="row">

                                                            @{
                                                                foreach (var _attr in _card?.SetValues)
                                                                {
                                                                    var _DetailOfAttr = LstAttribute.Where(r => r.Name == _attr.Key).FirstOrDefault();
                                                                    <div class="form-group col-4">
                                                                        <label>
                                                                            @_attr.Key
                                                                        </label>
                                                                        <div class="input-group ">
                                                                            @if (_DetailOfAttr.ValueType == SERVER_TYPES.Enum || _DetailOfAttr.ValueType == SERVER_TYPES.Array)
                                                                            {
                                                                                <select title="-- Select --"
                                                                                        class="form-control selectpicker"
                                                                                        data-style="btn-light"
                                                                                        required
                                                                                        @onchange=@(async () => 
                                                                                                    {
                                                                                                        var _tmpKeys = await SelectAndBindSingleTextReturn(); 
                                                                                                        _card.SetValues[_attr.Key] = _tmpKeys; 
                                                                                                    })>

                                                                                    @foreach (var _valRange in _DetailOfAttr.ValueRange)
                                                                                    {
                                                                                        <option value="@_valRange">
                                                                                            @_valRange
                                                                                        </option>
                                                                                    }
                                                                                </select>
                                                                            }
                                                                            else if (_DetailOfAttr.ValueType == SERVER_TYPES.Double)
                                                                            {
                                                                                <input class="form-control"
                                                                                       type="number"
                                                                                       @bind-value="@_card.SetValues[_attr.Key]"
                                                                                       required
                                                                                       step="0.01"
                                                                                       min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                       max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                            }
                                                                            else if (_DetailOfAttr.ValueType == SERVER_TYPES.String)
                                                                            {
                                                                                <input class="form-control"
                                                                                       type="text"
                                                                                       required
                                                                                       @bind-value="@_card.SetValues[_attr.Key]" />
                                                                            }
                                                                            else if (_DetailOfAttr.ValueType == SERVER_TYPES.Integer)
                                                                            {
                                                                                <input class="form-control"
                                                                                       type="number"
                                                                                       @bind-value="@_card.SetValues[_attr.Key]"
                                                                                       step="1"
                                                                                       required
                                                                                       min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                       max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                }
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                    }







                                    @*<div class="accordion" id="accordion">
                                            @{
                                                var _genNewItemId = NewInterlockParams.Actions.Select(r => new { objItem = r, idItem = Guid.NewGuid().ToString("N") }).ToList();
                                                foreach (var it in _genNewItemId)
                                                {
                                                    <div class="card">
                                                        <div class="card-header" id="AccordionHeading-@it.idItem">
                                                            <h2 class="mb-0 d-flex">
                                                                <button class="flex-grow-1 btn btn-link btn-block text-left" type="button" data-toggle="collapse" data-target="#collapse-@it.idItem">
                                                                    Actions | Single Device
                                                                    <span class="badge badge-pill badge-info">#@it.objItem?.DeviceId</span>

                                                                </button>

                                                                <button class="m-2 btn btn-xs btn-outline-danger"
                                                                        type="button"
                                                                        @onclick=@(() => { NewInterlockParams.Actions.Remove(it.objItem); })>
                                                                    <i class="far fa-trash-alt"></i>
                                                                </button>
                                                            </h2>
                                                        </div>
                                                        <div id="collapse-@it.idItem" class="collapse" data-parent="#accordion">
                                                            <div class="card-body">

                                                                <div class="row">

                                                                    <div class="form-group col-12 col-lg-4">
                                                                        <label>
                                                                            Single/Group Device
                                                                        </label>
                                                                        <div class="input-group ">
                                                                            <select class="selectpicker form-control"
                                                                                    title="-- Select --"
                                                                                    data-style="btn-light"
                                                                                    @ref="elCurrentSingleSelectBox1"
                                                                                    @onchange=@(async () => { var _tmpKey = await SelectAndBindSingle(); })>
                                                                                @foreach (var obj in Enum.GetValues(typeof(ActionGroupDeviceEnum)))
                                                                                {
                                                                                    var value = Enum.GetName(typeof(ActionGroupDeviceEnum), obj);
                                                                                    var key = (int)obj;
                                                                                    <option value="@key">@value</option>
                                                                                }
                                                                            </select>
                                                                        </div>
                                                                    </div>

                                                                    <div class="form-group col-12 col-lg-8">
                                                                        <label>
                                                                            Target Device
                                                                        </label>
                                                                        <div class="input-group ">
                                                                            <select class="selectpicker form-control"
                                                                                    title="-- Select --"
                                                                                    data-style="btn-light"
                                                                                    data-live-search="true"
                                                                                    @ref="elCurrentSingleSelectBox1"
                                                                                    @onchange=@(async () => { var _tmpKey = await SelectAndBindSingle(); it.objItem.DeviceId = _tmpKey; })>
                                                                                @foreach (var _dv in LstDevice)
                                                                                {
                                                                                    <option value="@_dv.Id">[@_dv.Capabilitie] @_dv.Name</option>
                                                                                }
                                                                            </select>
                                                                        </div>
                                                                    </div>

                                                                    <div class="col-12">
                                                                        <hr class="dotted">
                                                                    </div>

                                                                    <div class="form-group col-lg-4 col-12">
                                                                        <label>
                                                                            AC Power
                                                                        </label>
                                                                        <div class="input-group ">
                                                                            <select class="selectpicker form-control"
                                                                                    title="-- Select --"
                                                                                    data-style="btn-light"
                                                                                    @ref="elCurrentSingleSelectBox1"
                                                                                    @onchange=@(async () => { var _tmpKey = await SelectAndBindSingle(); var _tmpName = (ACPowerEnum)_tmpKey; it.objItem.SetValues["ACPower"] = _tmpName.ToString(); })>
                                                                                @foreach (var obj in Enum.GetValues(typeof(ACPowerEnum)))
                                                                                {
                                                                                    var value = Enum.GetName(typeof(ACPowerEnum), obj);
                                                                                    var key = (int)obj;
                                                                                    <option value="@key">@value</option>
                                                                                }
                                                                            </select>
                                                                        </div>
                                                                    </div>

                                                                    <div class="form-group col-lg-4 col-12">
                                                                        <label>
                                                                            iTM AC Mode
                                                                        </label>
                                                                        <div class="input-group ">
                                                                            <select class="selectpicker form-control"
                                                                                    title="-- Select --"
                                                                                    data-style="btn-light"
                                                                                    @ref="elCurrentSingleSelectBox1"
                                                                                    @onchange=@(async () => { var _tmpKey = await SelectAndBindSingle(); var _tmpName = (itmACModeEnum)_tmpKey; it.objItem.SetValues["itmACMode"] = _tmpName.ToString(); })>
                                                                                @foreach (var obj in Enum.GetValues(typeof(itmACModeEnum)))
                                                                                {
                                                                                    var value = Enum.GetName(typeof(itmACModeEnum), obj);
                                                                                    var key = (int)obj;
                                                                                    <option value="@key">@value</option>
                                                                                }
                                                                            </select>

                                                                        </div>
                                                                    </div>

                                                                    <div class="form-group col-lg-4 col-12">
                                                                        <label>
                                                                            Set Temp
                                                                        </label>
                                                                        <div class="input-group ">
                                                                            <input type="number"
                                                                                   step="0.01"
                                                                                   min="-200"
                                                                                   max="200"
                                                                                   placeholder="-200:200"
                                                                                   class="form-control"
                                                                                   @onchange=@((e) => { it.objItem.SetValues["SetTemp"] = e.Value.ToString(); }) />
                                                                        </div>
                                                                    </div>

                                                                    <div class="form-group col-lg-4 col-12">
                                                                        <label>
                                                                            Fan Direct
                                                                        </label>
                                                                        <div class="input-group ">
                                                                            <input type="number"
                                                                                   step="1"
                                                                                   min="-1"
                                                                                   max="100"
                                                                                   placeholder="-1:100"
                                                                                   class="form-control"
                                                                                   @onchange=@((e) => { it.objItem.SetValues["FanDirect"] = e.Value.ToString(); }) />
                                                                        </div>
                                                                    </div>

                                                                    <div class="form-group col-lg-4 col-12">
                                                                        <label>
                                                                            Fan Speed
                                                                        </label>
                                                                        <div class="input-group ">
                                                                            <select class="selectpicker form-control"
                                                                                    title="-- Select --"
                                                                                    data-style="btn-light"
                                                                                    @ref="elCurrentSingleSelectBox1"
                                                                                    @onchange=@(async () => { var _tmpKey = await SelectAndBindSingle(); var _tmpName = (FanSpeedEnum)_tmpKey; it.objItem.SetValues["FanSpeed"] = _tmpName.ToString(); })>
                                                                                @foreach (var obj in Enum.GetValues(typeof(FanSpeedEnum)))
                                                                                {
                                                                                    var value = Enum.GetName(typeof(FanSpeedEnum), obj);
                                                                                    var key = (int)obj;
                                                                                    <option value="@key">@value</option>
                                                                                }
                                                                            </select>
                                                                        </div>
                                                                    </div>


                                                                </div>

                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            }

                                        </div>*@

                                </fieldset>

                                <fieldset class="border p-2">
                                    <legend class="w-auto">
                                        @*<input type="checkbox"
                                                   class="custom-control-input"
                                                    />
                                            <label class="custom-control-label">Custom JavaScript Actions</label>*@

                                        <div class="form-group">
                                            <div class="custom-control custom-switch">
                                                <input type="checkbox"
                                                       id="swNewJsAction"
                                                       @bind-value="NewSceneParams.IsJavaScriptType"
                                                       class="custom-control-input">
                                                <label class="custom-control-label"
                                                       for="swNewJsAction">
                                                    Custom JavaScript Actions
                                                </label>
                                            </div>
                                        </div>

                                        @*<input type="checkbox"
                                            data-off-color="default"
                                            data-on-color="success"
                                            data-on-text="USE"
                                            data-off-text="NOT USE"
                                            @onchange=@((e) => {Console.WriteLine(e.Value); Console.WriteLine((bool)e.Value); NewInterlockParams.IsJavaScriptAction = (bool)e.Value; }) />*@

                                    </legend>

                                    @if (NewSceneParams.IsJavaScriptType)
                                    {
                                        <div class="form-group row">
                                            <label class="col-sm-2 col-form-label">
                                                <i class="fas fa-user-edit"></i>
                                                Custom JavaScript
                                            </label>
                                            <div class="col-sm-10">
                                                <textarea class="summernote"
                                                          required=@(NewSceneParams.IsJavaScriptType ? true : false)
                                                          id="tbNewJsAction"></textarea>
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <label class="col-sm-2 col-form-label"></label>
                                            <div class="col-sm-10">
                                                <div class="d-flex justify-content-center">
                                                    <div class="btn-group btn-group-sm" role="group">
                                                        <button type="button" class="btn btn-primary">
                                                            Run
                                                        </button>

                                                        <button type="button" class="btn btn-danger">
                                                            Stop
                                                        </button>

                                                        <button type="button" class="btn btn-primary">
                                                            Reload Data
                                                        </button>

                                                        <button type="button" class="btn btn-primary">
                                                            Save
                                                        </button>

                                                        <button type="button" class="btn btn-primary">
                                                            Close
                                                        </button>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <label class="col-sm-2 col-form-label"></label>
                                            <div class="col-sm-10">
                                                <textarea class="summernote"
                                                          id="tbNewJsDebug"></textarea>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="alert alert-warning" role="alert">
                                            Javascript Action is not in used
                                        </div>
                                    }

                                </fieldset>

                            </form>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary"
                                    data-dismiss="modal"
                                    @onclick=@(() => { FormNewClose(); })>
                                Close
                            </button>
                            <button type="button"
                                    class="btn btn-primary"
                                    @onclick=@(() => { FormNewSubmitInterlock(); })>
                                Create
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Modal Edit Schedule -->
            <div class="modal fade" data-backdrop="static" data-keyboard="false" id="mdEditSchedule" tabindex="-1">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h2 class="modal-title">
                                Edit Schedule
                                <span class="badge badge-pill badge-success">@crEditScene.Name</span>
                            </h2>

                            <button type="button" class="close" data-dismiss="modal"
                                    aria-label="Close"
                                    @onclick=@(() => { FormEditClose(); })>
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <form @ref="elFormEditSchedule"
                                  class="needs-validation"
                                  id="formEditWorker"
                                  novalidate>

                                <fieldset class="border p-2">
                                    <legend class="w-auto">Basic Info</legend>

                                    <div class="form-group row">
                                        <label class="col-sm-2 col-form-label">
                                            <i class="fas fa-info-circle"></i>
                                            Interlock Name
                                        </label>
                                        <div class="col-sm-10">
                                            <input @bind-value="crEditScene.Name"
                                                   type="text"
                                                   class="form-control"
                                                   required />
                                        </div>
                                    </div>
                                </fieldset>

                                <fieldset class="border p-2">
                                    <legend class="w-auto">
                                        <h2 class="font-weight-bolder font-italic">IF</h2>
                                    </legend>

                                    <div class="container-fluid">
                                        <div class="row">
                                            <button class="btn btn-outline-primary m-1">Export Configure</button>
                                            <button class="btn btn-outline-primary m-1">Import Configure</button>
                                        </div>

                                        @foreach (var _express in crEditScene.Expressions)
                                        {
                                            int idx = crEditScene.Expressions.IndexOf(_express);

                                            <div class="row align-items-center">
                                                @*show the delete expression button*@
                                                <div class="col-auto">
                                                    <button class="btn btn-danger btn-sm"
                                                            type="button"
                                                            @onclick=@(() => { crEditScene.Expressions.Remove(_express); })>
                                                        <i class="fas fa-trash-alt"></i>
                                                    </button>
                                                </div>

                                                @if (_express.IsLogicExpression == true)
                                                {
                                                    if (_express.Logic == LogicExpression.OpenpArenthesis)
                                                    {
                                                        <div class="col-auto">
                                                            <img src="public/img/bracket_left.png" style="background:green;" />
                                                        </div>
                                                    }
                                                    else if (_express.Logic == LogicExpression.CloseParenthesis)
                                                    {
                                                        <div class="col-auto">
                                                            <img src="public/img/bracket_right.png" style="background:green;" />
                                                        </div>
                                                    }
                                                    else if (_express.Logic == LogicExpression.And)
                                                    {
                                                        <div class="col-auto">
                                                            <h3>AND</h3>
                                                        </div>
                                                    }
                                                    else if (_express.Logic == LogicExpression.Or)
                                                    {
                                                        <div class="col-auto">
                                                            <h3>OR</h3>
                                                        </div>
                                                    }
                                                    else if (_express.Logic == LogicExpression.Not)
                                                    {
                                                        <div class="col-auto">
                                                            <h3>NOT</h3>
                                                        </div>
                                                    }

                                                    <div class="col-3">
                                                        <select title="-- Change --"
                                                                id="slEditCondLogicExpress-@idx"
                                                                data-style="btn-light btn-sm"
                                                                class="form-control selectpicker"
                                                                @onchange=@(async()=>
                                                                                    {
                                                                                       var _tmpKey =  await SelectAndBindSingle();
                                                                                        crEditScene.Expressions.ElementAtOrDefault(idx).Logic = (LogicExpression)_tmpKey;
                                                                                    })>
                                                            @foreach (var obj in Enum.GetValues(typeof(LogicExpression)))
                                                            {
                                                                var value = Enum.GetName(typeof(LogicExpression), obj);
                                                                var key = (int)obj;
                                                                <option value="@key">@value</option>
                                                            }
                                                        </select>
                                                    </div>
                                                }
                                                else if (_express.IsLogicExpression == false)
                                                {
                                                    var _objDevice = LstDevice.Where(r => r.Id == _express.DeviceId).FirstOrDefault();

                                                    <div class="col-3">
                                                        <div class="info-box">
                                                            <span class="info-box-icon bg-success">@_objDevice.Capabilitie</span>
                                                            <div class="info-box-content">
                                                                <span class="info-box-text">@_objDevice.Id</span>
                                                                <span class="info-box-number">@_objDevice.Name</span>
                                                                <span class="info-box-number">
                                                                    <select title="-- Change --"
                                                                            id="slEditCondDevice-@idx"
                                                                            data-style="btn-light btn-sm"
                                                                            class="form-control selectpicker"
                                                                            data-live-search="true"
                                                                            @onchange=@(async()=>
                                                                                    {
                                                                                       var _tmpKey =  await SelectAndBindSingle();
                                                                                        crEditScene.Expressions.ElementAtOrDefault(idx).DeviceId = _tmpKey;
                                                                                    })>
                                                                        @foreach (var _dv in LstDevice)
                                                                        {
                                                                            <option value="@_dv.Id">@_dv.Id - @_dv.Name</option>
                                                                        }
                                                                    </select>
                                                                </span>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-2">
                                                        <div class="info-box">
                                                            <span class="info-box-icon bg-success">
                                                                <i class="@GetCompareSign(crEditScene.Expressions.ElementAtOrDefault(idx).Comparison)"></i>
                                                            </span>
                                                            <div class="info-box-content">
                                                                <select title="-- Change --"
                                                                        id="slEditCondOperator-@idx"
                                                                        data-style="btn-light btn-sm"
                                                                        class="form-control selectpicker"
                                                                        @onchange=@(async()=>
                                                                                    {
                                                                                       var _tmpKey =  await SelectAndBindSingle();
                                                                        crEditScene.Expressions.ElementAtOrDefault(idx).Comparison = (MasterDataModel.CompareOperators)_tmpKey;
                                                                    })>
                                                                    @foreach (var obj in Enum.GetValues(typeof(MasterDataModel.CompareOperators)))
                                                                    {
                                                                        var value = Enum.GetName(typeof(MasterDataModel.CompareOperators), obj);
                                                                        var key = (int)obj;
                                                                        <option value="@key">@value</option>
                                                                    }
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-3">
                                                        <div class="info-box">
                                                            <span class="info-box-icon bg-success">
                                                                Value
                                                            </span>
                                                            <div class="info-box-content">
                                                                <select title="-- Change Attribute --"
                                                                        id="slEditCondDeviceAttr-@idx"
                                                                        data-style="btn-light btn-sm"
                                                                        class="form-control selectpicker mb-2"
                                                                        data-live-search="true"
                                                                        @onchange=@(async()=>
                                                                                    {
                                                                                        var _tmpKey = await SelectAndBindSingleTextReturn();
                                                                                        crEditScene.Expressions.ElementAtOrDefault(idx).Attribute = _tmpKey;
                                                                                    })>

                                                                    @{
                                                                        var _dictDvAttr = LstDevice.Where(r => r.Id == _express.DeviceId).FirstOrDefault().Status;
                                                                        foreach (var DvAttr in _dictDvAttr)
                                                                        {
                                                                            <option value="@DvAttr.Key">@DvAttr.Key</option>
                                                                        }
                                                                    }
                                                                </select>

                                                                @{
                                                                    var _DetailOfAttr = LstAttribute.Where(r => r.Name == crEditScene.Expressions.ElementAtOrDefault(idx).Attribute).FirstOrDefault();
                                                                    if (_DetailOfAttr != default)
                                                                    {
                                                                        if (_DetailOfAttr.ValueType == SERVER_TYPES.Enum || _DetailOfAttr.ValueType == SERVER_TYPES.Array)
                                                                        {
                                                                            <select class="form-control"
                                                                                    id=@("slEditCondDeviceAttr" + _DetailOfAttr.Name + "-" + idx)
                                                                                    @onchange=@(async () =>
                                                                                            {
                                                                                                var _tmpKey = await jQuerySelectAndBindSingleTextReturn();
                                                                                               crEditScene.Expressions.ElementAtOrDefault(idx).CompareValue = _tmpKey;
                                                                                            })>

                                                                                @foreach (var _valRange in _DetailOfAttr.ValueRange)
                                                                                {
                                                                                    <option value="@_valRange">
                                                                                        @_valRange
                                                                                    </option>
                                                                                }
                                                                            </select>
                                                                        }
                                                                        else if (_DetailOfAttr.ValueType == SERVER_TYPES.Double)
                                                                        {
                                                                            <input class="form-control"
                                                                                   type="number"
                                                                                   @bind-value="@crEditScene.Expressions.ElementAtOrDefault(idx).CompareValue"
                                                                                   required
                                                                                   step="0.01"
                                                                                   min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                   max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                        }
                                                                        else if (_DetailOfAttr.ValueType == SERVER_TYPES.String)
                                                                        {
                                                                            <input class="form-control"
                                                                                   type="text"
                                                                                   required
                                                                                   @bind-value="@crEditScene.Expressions.ElementAtOrDefault(idx).CompareValue" />
                                                                        }
                                                                        else if (_DetailOfAttr.ValueType == SERVER_TYPES.Integer)
                                                                        {
                                                                            <input class="form-control"
                                                                                   type="number"
                                                                                   @bind-value="@crEditScene.Expressions.ElementAtOrDefault(idx).CompareValue"
                                                                                   step="1"
                                                                                   required
                                                                                   min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                   max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                        }
                                                                    }
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-3">
                                                        <div class="info-box">
                                                            <span class="info-box-icon bg-success">
                                                                <i class="fas fa-stopwatch"></i>
                                                            </span>
                                                            <div class="info-box-content">
                                                                <div class="input-group input-group-sm">
                                                                    <input type="number"
                                                                           class="form-control"
                                                                           min="0"
                                                                           step="1"
                                                                           placeholder="Interval Time"
                                                                           required
                                                                           @bind-value="crEditScene.Expressions.ElementAtOrDefault(idx).Interval">
                                                                    <div class="input-group-append">
                                                                        <span class="input-group-text">
                                                                            sec
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                }
                                            </div>
                                        }

                                        <div class="dropdown">
                                            <button class="btn btn-success dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                <i class="fas fa-plus-circle"></i>
                                            </button>

                                            <ul class="dropdown-menu">
                                                <li>
                                                    <a class="dropdown-item btn d-flex">
                                                        <div class="flex-grow-1">COMMAND</div>
                                                        <i class="fas fa-chevron-right"></i>
                                                    </a>
                                                    <ul class="submenu dropdown-menu">
                                                        <li>
                                                            <a class="dropdown-item btn"
                                                               @onclick=@(() =>
                                                               {
                                                                   crEditScene.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = true, Logic = LogicExpression.And });
                                                                   InvokeAsync(StateHasChanged);
                                                               })>
                                                                And
                                                            </a>
                                                        </li>

                                                        <li>
                                                            <a class="dropdown-item btn"
                                                               @onclick=@(() =>
                                                               {
                                                                   crEditScene.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = true, Logic = LogicExpression.Or });
                                                                   InvokeAsync(StateHasChanged);
                                                               })>
                                                                Or
                                                            </a>
                                                        </li>

                                                        <li>
                                                            <a class="dropdown-item btn"
                                                               @onclick=@(() =>
                                                               {
                                                                   crEditScene.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = true, Logic = LogicExpression.Not });
                                                                   InvokeAsync(StateHasChanged);
                                                               })>
                                                                Not
                                                            </a>
                                                        </li>

                                                        <li>
                                                            <a class="dropdown-item btn"
                                                               @onclick=@(() =>
                                                               {
                                                                   crEditScene.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = true, Logic = LogicExpression.OpenpArenthesis });
                                                                   InvokeAsync(StateHasChanged);
                                                               })>
                                                                OpenpArenthesis
                                                            </a>
                                                        </li>

                                                        <li>
                                                            <a class="dropdown-item btn"
                                                               @onclick=@(() =>
                                                               {
                                                                   crEditScene.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = true, Logic = LogicExpression.CloseParenthesis });
                                                                   InvokeAsync(StateHasChanged);
                                                               })>
                                                                CloseArenthesis
                                                            </a>
                                                        </li>
                                                    </ul>
                                                </li>

                                                <li>
                                                    <a class="dropdown-item btn d-flex">
                                                        <div class="flex-grow-1">TRIGGER BLOCK</div>
                                                        <i class="fas fa-chevron-right"></i>
                                                    </a>
                                                    <ul class="submenu dropdown-menu">
                                                        @* AREA Level *@
                                                        <li>
                                                            <a class="dropdown-item btn d-flex">
                                                                <div class="flex-grow-1">Area</div>
                                                                @if (numOfAreaLV1 > 0)
                                                                {
                                                                    <span class="badge badge-pill badge-success">@LstAreaLV1.Count</span>
                                                                }
                                                            </a>
                                                            @if (numOfAreaLV1 > 0)
                                                            {
                                                                <ul class="submenu dropdown-menu">
                                                                    @{
                                                                        foreach (var _area in LstAreaLV1)
                                                                        {
                                                                            var _LstZoneIdInAreaItem = LstZone.Where(r => r.Area == _area.Id).Select(x => x.Id).ToList();
                                                                            var _LstSectionIdInZoneItem = LstSection.Where(r => _LstZoneIdInAreaItem.Contains(r.Zone)).Select(x => x.Id).ToList();
                                                                            var LstAreaLV2 = LstDevice.Where(r => _LstSectionIdInZoneItem.Contains(r.SectionId)).ToList();
                                                                            var numOfAreaLV2 = LstAreaLV2.Count;
                                                                            <li>
                                                                                <a class="dropdown-item btn d-flex">
                                                                                    <div class="flex-grow-1">@_area.Name</div>
                                                                                    @if (numOfAreaLV2 > 0)
                                                                                    {
                                                                                        <span class="badge badge-pill badge-success">@numOfAreaLV2</span>
                                                                                    }
                                                                                </a>
                                                                                @if (numOfAreaLV2 > 0)
                                                                                {
                                                                                    <ul class="submenu dropdown-menu">
                                                                                        @foreach (var _device in LstAreaLV2)
                                                                                        {
                                                                                            <li>
                                                                                                <a class="dropdown-item btn"
                                                                                                   @onclick=@(()=>
                                                                                                   {
                                                                                                       crEditScene.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = false, DeviceId = _device.Id, Comparison= MasterDataModel.CompareOperators.Equal });
                                                                                                   })> @_device.Name </a>
                                                                                            </li>
                                                                                        }
                                                                                    </ul>
                                                                                }
                                                                            </li>
                                                                        }
                                                                    }
                                                                </ul>
                                                            }

                                                        </li>

                                                        @* ZONE Level *@
                                                        <li>
                                                            <a class="dropdown-item btn d-flex">

                                                                <div class="flex-grow-1">Zone</div>
                                                                @if (numOfZoneLV1 > 0)
                                                                {
                                                                    <span class="badge badge-pill badge-success">@numOfZoneLV1</span>
                                                                }
                                                            </a>
                                                            @if (numOfZoneLV1 > 0)
                                                            {
                                                                <ul class="submenu dropdown-menu">
                                                                    @{
                                                                        foreach (var _zone in LstZoneLV1)
                                                                        {
                                                                            var _LstSectionIdInZoneItem = LstSection.Where(r => r.Zone == _zone.Id).Select(x => x.Id).ToList();
                                                                            var LstZoneLV2 = LstDevice.Where(r => _LstSectionIdInZoneItem.Contains(r.SectionId)).ToList();
                                                                            var numOfZoneLV2 = LstZoneLV2.Count;
                                                                            <li>
                                                                                <a class="dropdown-item btn d-flex">
                                                                                    <div class="flex-grow-1"> @_zone.Name </div>
                                                                                    @if (numOfZoneLV2 > 0)
                                                                                    {
                                                                                        <span class="badge badge-pill badge-success">@numOfZoneLV2</span>
                                                                                    }
                                                                                </a>
                                                                                @if (numOfZoneLV2 > 0)
                                                                                {
                                                                                    <ul class="submenu dropdown-menu">

                                                                                        @foreach (var _device in LstZoneLV2)
                                                                                        {
                                                                                            <li>
                                                                                                <a class="dropdown-item btn"
                                                                                                   @onclick=@(()=>
                                                                                                   {
                                                                                                       crEditScene.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = false, DeviceId = _device.Id, Comparison= MasterDataModel.CompareOperators.Equal });
                                                                                                   })> @_device.Name </a>
                                                                                            </li>
                                                                                        }
                                                                                    </ul>
                                                                                }
                                                                            </li>
                                                                        }
                                                                    }
                                                                </ul>
                                                            }

                                                        </li>

                                                        @* ROOM Level *@
                                                        <li>
                                                            <a class="dropdown-item btn d-flex">
                                                                <div class="flex-grow-1">Room</div>
                                                                @if (numOfSectionLV1 > 0)
                                                                {
                                                                    <span class="badge badge-pill badge-success">@numOfSectionLV1</span>
                                                                }

                                                            </a>
                                                            @if (numOfSectionLV1 > 0)
                                                            {
                                                                <ul class="submenu dropdown-menu">
                                                                    @{
                                                                        foreach (var _section in LstSectionLV1)
                                                                        {
                                                                            var LstSectionLV2 = LstDevice.Where(r => r.SectionId == _section.Id).ToList();
                                                                            var numOfSectionLV2 = LstSectionLV2.Count;
                                                                            <li>
                                                                                <a class="dropdown-item btn d-flex">
                                                                                    <div class="flex-grow-1">@_section.Name</div>
                                                                                    @if (numOfSectionLV2 > 0)
                                                                                    {
                                                                                        <span class="badge badge-pill badge-success">@numOfSectionLV2</span>
                                                                                    }
                                                                                </a>
                                                                                @if (numOfSectionLV2 > 0)
                                                                                {
                                                                                    <ul class="submenu dropdown-menu">
                                                                                        @foreach (var _device in LstSectionLV2)
                                                                                        {
                                                                                            <li>
                                                                                                <a class="dropdown-item btn"
                                                                                                   @onclick=@(()=>
                                                                                                   {
                                                                                                       crEditScene.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = false, DeviceId = _device.Id, Comparison= MasterDataModel.CompareOperators.Equal });
                                                                                                   })> @_device.Name </a>
                                                                                            </li>
                                                                                        }
                                                                                    </ul>
                                                                                }
                                                                            </li>
                                                                        }
                                                                    }
                                                                </ul>
                                                            }

                                                        </li>
                                                    </ul>
                                                </li>
                                            </ul>
                                        </div>


                                    </div>
                                </fieldset>

                                <fieldset class="border p-2">
                                    <legend class="w-auto">THEN</legend>

                                    <div class="row">
                                        <button class="btn btn-success m-3 btn-block"
                                                type="button"
                                                @onclick=@(() => { AddNewActionHandle(FormAction.EditAddAction); })>
                                            <i class="fas fa-plus-circle"></i>
                                            ADD NEW ACTIONS
                                        </button>
                                    </div>

                                    @{
                                        // This is List Action create by user and ready to update to DB
                                        foreach (var cardNew in crEditLstAddActions)
                                        {
                                            <div class="callout callout-warning">
                                                <div class="mb-4 d-flex">
                                                    <h4 class="mr-auto">
                                                        <span class="badge badge-pill badge-warning">NEW</span>
                                                        Single Actions |
                                                        <span class="badge badge-pill badge-warning">#@cardNew.ActionObj.DeviceId</span>
                                                    </h4>

                                                    <button class="btn btn-outline-danger"
                                                            type="button"
                                                            @onclick=@(() => { crEditLstAddActions.Remove(cardNew); crEditScene.Actions.Remove(cardNew.ActionObj); })>
                                                        <i class="far fa-trash-alt"></i>
                                                    </button>
                                                </div>

                                                <div class="row">

                                                    <div class="form-group col-4">
                                                        <label>
                                                            Target Device
                                                        </label>
                                                        <div class="input-group ">
                                                            <select class="selectpicker form-control"
                                                                    title="-- Select --"
                                                                    id="slNewTriggerDv-@cardNew.ActionId"
                                                                    data-style="btn-warning"
                                                                    data-live-search="true"
                                                                    @onchange=@(async () => { var _tmpKey = await SelectAndBindSingle(); cardNew.ActionObj.DeviceId = _tmpKey; })>
                                                                @foreach (var _dv in LstDevice)
                                                                {
                                                                    <option value="@_dv.Id">[@_dv.Capabilitie] @_dv.Name</option>
                                                                }
                                                            </select>
                                                        </div>
                                                    </div>

                                                    @{
                                                        var _dvType = String.Empty;
                                                        _dvType = @LstDevice.Where(r => r.Id == cardNew.ActionObj.DeviceId).FirstOrDefault()?.DeviceType;
                                                    }
                                                    <div class="col-8">
                                                        <div class="callout callout-warning">
                                                            <div class="d-flex">
                                                                <div class=" flex-grow-1">
                                                                    <h3>Device Type </h3>
                                                                </div>
                                                                <div>
                                                                    <span class="badge badge-pill badge-warning">
                                                                        <h4>@_dvType</h4>
                                                                    </span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-12">
                                                        <hr class="dotted">
                                                    </div>


                                                    <div class="card col-12">
                                                        <div class="card-header">
                                                            <select title="-- Select Attributes --"
                                                                    data-style="btn-warning"
                                                                    class="form-control selectpicker"
                                                                    multiple
                                                                    data-actions-box="true"
                                                                    data-live-search="true"
                                                                    id="slNewDeviceAttribute-@cardNew.ActionId"
                                                                    @onchange=@(async()=> { await SelectAndBindMultiAttr(cardNew.ActionObj?.SetValues);  })>
                                                                @{
                                                                    if (_dvType != String.Empty && _dvType != "" && _dvType != null)
                                                                    {
                                                                        var _lstAttrOfDvType = LstDeviceType.Where(r => r.Name == _dvType).FirstOrDefault().Attributes;
                                                                        foreach (var _attr in _lstAttrOfDvType)
                                                                        {
                                                                            <option value="@_attr">@_attr</option>
                                                                        }
                                                                    }
                                                                }
                                                            </select>
                                                        </div>
                                                        <div class="card-body">
                                                            <div class="row">

                                                                @{
                                                                    foreach (var _attr in cardNew.ActionObj?.SetValues)
                                                                    {
                                                                        var _DetailOfAttr = LstAttribute.Where(r => r.Name == _attr.Key).FirstOrDefault();
                                                                        <div class="form-group col-4">
                                                                            <label>
                                                                                @_attr.Key
                                                                            </label>
                                                                            <div class="input-group ">
                                                                                @if (_DetailOfAttr.ValueType == SERVER_TYPES.Enum || _DetailOfAttr.ValueType == SERVER_TYPES.Array)
                                                                                {
                                                                                    <select title="-- Select --"
                                                                                            class="form-control selectpicker"
                                                                                            data-style="btn-light"
                                                                                            required
                                                                                            id=@("slNew" + _attr.Key+ "-" + cardNew.ActionId)
                                                                                            @onchange=@(async () => { var _tmpKeys = await SelectAndBindSingleTextReturn(); cardNew.ActionObj.SetValues[_attr.Key] = _tmpKeys; })>

                                                                                        @foreach (var _valRange in _DetailOfAttr.ValueRange)
                                                                                        {
                                                                                            <option value="@_valRange">
                                                                                                @_valRange
                                                                                            </option>
                                                                                        }
                                                                                    </select>
                                                                                }
                                                                                else if (_DetailOfAttr.ValueType == SERVER_TYPES.Double)
                                                                                {
                                                                                    <input class="form-control"
                                                                                           type="number"
                                                                                           @bind-value="@cardNew.ActionObj.SetValues[_attr.Key]"
                                                                                           required
                                                                                           step="0.01"
                                                                                           min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                           max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                                }
                                                                                else if (_DetailOfAttr.ValueType == SERVER_TYPES.String)
                                                                                {
                                                                                    <input class="form-control"
                                                                                           type="text"
                                                                                           @bind-value="@cardNew.ActionObj.SetValues[_attr.Key]" />
                                                                                }
                                                                                else if (_DetailOfAttr.ValueType == SERVER_TYPES.Integer)
                                                                                {
                                                                                    <input class="form-control"
                                                                                           type="number"
                                                                                           @bind-value="@cardNew.ActionObj.SetValues[_attr.Key]"
                                                                                           step="1"
                                                                                           required
                                                                                           min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                           max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                                }
                                                                            </div>
                                                                        </div>
                                                                    }
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>

                                        }

                                        // This is List Action fetch from server
                                        foreach (var cardEdit in crLstEditActions)
                                        {
                                            <div id="cardEdit-@cardEdit.ActionObj.DeviceId" class="callout callout-success">
                                                <div class="mb-4 d-flex">
                                                    <h4 class="mr-auto">
                                                        <span class="badge badge-pill badge-success">DEVICE</span>
                                                        Single Actions |
                                                        <span class="badge badge-pill badge-success">#@cardEdit.ActionObj?.DeviceId</span>
                                                    </h4>

                                                    <button class="btn btn-outline-danger"
                                                            type="button"
                                                            @onclick=@(() => { crLstEditActions.Remove(cardEdit); crEditScene.Actions.Remove(cardEdit.ActionObj); })>
                                                        <i class="far fa-trash-alt"></i>
                                                    </button>
                                                </div>

                                                <div class="row">
                                                    <div class="form-group col-4">
                                                        <label>
                                                            Target Device
                                                        </label>
                                                        <div class="input-group ">
                                                            <select class="selectpicker form-control"
                                                                    title="-- Select --"
                                                                    id="slEditTriggerDv-@cardEdit.ActionId"
                                                                    data-style="btn-success"
                                                                    data-live-search="true"
                                                                    disabled
                                                                    @onchange=@(async () => { cardEdit.ActionObj.DeviceId = await SelectAndBindSingle(); })>
                                                                @foreach (var _dv in LstDevice)
                                                                {
                                                                    <option value="@_dv.Id">[@_dv.Capabilitie] @_dv.Name</option>
                                                                }
                                                            </select>
                                                        </div>
                                                    </div>
                                                    @{ var _dvType = @LstDevice.Where(r => r.Id == cardEdit.ActionObj.DeviceId).FirstOrDefault()?.DeviceType; }
                                                    <div class="col-8">
                                                        <div class="callout callout-success">
                                                            <div class="d-flex">
                                                                <div class=" flex-grow-1">
                                                                    <h3>Device Type </h3>
                                                                </div>
                                                                <div>
                                                                    <span class="badge badge-pill badge-success">
                                                                        <h4>@_dvType</h4>
                                                                    </span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-12">
                                                        <hr class="dotted">
                                                    </div>

                                                    <div class="card col-12">
                                                        <div class="card-header">
                                                            <select title="-- Select Attributes --"
                                                                    data-style="btn-success"
                                                                    class="form-control selectpicker"
                                                                    multiple
                                                                    data-actions-box="true"
                                                                    data-live-search="true"
                                                                    disabled
                                                                    id="slEditDeviceAttribute-@cardEdit.ActionId"
                                                                    @onchange=@(async()=> { await SelectAndBindMultiAttr(cardEdit.ActionObj.SetValues);  })>
                                                                @{
                                                                    var _lstAttrOfDvType = LstDeviceType.Where(r => r.Name == _dvType).Select(r => r.Attributes).FirstOrDefault();
                                                                    foreach (var _attr in _lstAttrOfDvType)
                                                                    {
                                                                        <option value="@_attr">@_attr</option>
                                                                    }
                                                                }
                                                            </select>
                                                        </div>
                                                        <div class="card-body">
                                                            <div class="row">

                                                                @{
                                                                    foreach (var _attr in cardEdit.ActionObj.SetValues)
                                                                    {
                                                                        var _DetailOfAttr = LstAttribute.Where(r => r.Name == _attr.Key).FirstOrDefault();
                                                                        <div class="form-group col-4">
                                                                            <label>
                                                                                @_attr.Key
                                                                            </label>
                                                                            <div class="input-group ">
                                                                                @if (_DetailOfAttr.ValueType == SERVER_TYPES.Enum || _DetailOfAttr.ValueType == SERVER_TYPES.Array)
                                                                                {
                                                                                    <select title="-- Select --"
                                                                                            class="form-control selectpicker"
                                                                                            data-style="btn-light"
                                                                                            required
                                                                                            id=@("slEdit" + _attr.Key+ "-" + cardEdit.ActionId)
                                                                                            @onchange=@(async () => { var _tmpKeys = await SelectAndBindSingleTextReturn(); cardEdit.ActionObj.SetValues[_attr.Key] = _tmpKeys; })>

                                                                                        @foreach (var _valRange in _DetailOfAttr.ValueRange)
                                                                                        {
                                                                                            <option value="@_valRange">
                                                                                                @_valRange
                                                                                            </option>
                                                                                        }
                                                                                    </select>
                                                                                }
                                                                                else if (_DetailOfAttr.ValueType == SERVER_TYPES.Double)
                                                                                {
                                                                                    <input class="form-control"
                                                                                           type="number"
                                                                                           @bind-value="@cardEdit.ActionObj.SetValues[_attr.Key]"
                                                                                           required
                                                                                           step="0.01"
                                                                                           min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                           max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                                }
                                                                                else if (_DetailOfAttr.ValueType == SERVER_TYPES.String)
                                                                                {
                                                                                    <input class="form-control"
                                                                                           type="text"
                                                                                           @bind-value="@cardEdit.ActionObj.SetValues[_attr.Key]" />
                                                                                }
                                                                                else if (_DetailOfAttr.ValueType == SERVER_TYPES.Integer)
                                                                                {
                                                                                    <input class="form-control"
                                                                                           type="number"
                                                                                           @bind-value="@cardEdit.ActionObj.SetValues[_attr.Key]"
                                                                                           step="1"
                                                                                           required
                                                                                           min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                           max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                                }
                                                                            </div>
                                                                        </div>
                                                                    }
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>

                                                </div>

                                            </div>
                                        }
                                    }
                                </fieldset>


                                <fieldset class="border p-2">
                                    <legend class="w-auto">

                                        <div class="form-group">
                                            <div class="custom-control custom-switch">
                                                <input type="checkbox"
                                                       id="swEditJsAction"
                                                       @bind-value="crEditScene.IsJavaScriptType"
                                                       checked="@(crEditScene.IsJavaScriptType?true:false)"
                                                       class="custom-control-input">
                                                <label class="custom-control-label"
                                                       for="swEditJsAction">
                                                    Custom JavaScript Actions
                                                </label>
                                            </div>
                                        </div>
                                    </legend>

                                    @if (crEditScene.IsJavaScriptType)
                                    {
                                        <div class="form-group row">
                                            <label class="col-sm-2 col-form-label">
                                                <i class="fas fa-user-edit"></i>
                                                Custom JavaScript
                                            </label>
                                            <div class="col-sm-10">
                                                <textarea class="summernote"
                                                          required=@(crEditScene.IsJavaScriptType ? true : false)
                                                          id="tbEditJsAction"></textarea>
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <label class="col-sm-2 col-form-label"></label>
                                            <div class="col-sm-10">
                                                <div class="d-flex justify-content-center">
                                                    <div class="btn-group btn-group-sm" role="group">
                                                        <button type="button" class="btn btn-primary">
                                                            Run
                                                        </button>

                                                        <button type="button" class="btn btn-danger">
                                                            Stop
                                                        </button>

                                                        <button type="button" class="btn btn-primary">
                                                            Reload Data
                                                        </button>

                                                        <button type="button" class="btn btn-primary">
                                                            Save
                                                        </button>

                                                        <button type="button" class="btn btn-primary">
                                                            Close
                                                        </button>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <label class="col-sm-2 col-form-label"></label>
                                            <div class="col-sm-10">
                                                <textarea class="summernote"
                                                          required=@(crEditScene.IsJavaScriptType ? true : false)
                                                          id="tbEditJsDebug">
                                        </textarea>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="alert alert-warning" role="alert">
                                            Javascript Action is not in used
                                        </div>
                                    }


                                </fieldset>

                            </form>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary"
                                    data-dismiss="modal"
                                    @onclick=@(() => { FormEditClose(); })>
                                CLOSE
                            </button>
                            <button type="button"
                                    class="btn btn-danger"
                                    @onclick=@(() => { DeleteItemHandle(crEditScene); })>
                                DELETE SCHEDULE
                            </button>
                            <button type="button"
                                    class="btn btn-primary"
                                    @onclick=@(() => { FormEditScheduleHandle(); })>
                                UPDATE SCHEDULE
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            @{
                if (flagForceSelectInject)
                {
                    InjectSelectAfterModal(true);
                    //Console.WriteLine("Inline Code");
                }
            }

        </div><!-- /.container-fluid -->
    </section>
    <!-- /.content -->
</div>

@code {
    // Hard Code Here
    enum ExpressSceneEnum { DvEvent, Command }
    enum itmACModeEnum { Unknown, Fan, Heat, Cool, Ventilation, Dry, AutoHeat, AutoCool }
    enum ACPowerEnum { On, Off, Unknown }
    enum FanSpeedEnum { Low, Medium, High, Auto, Unknown }
    enum ActionGroupDeviceEnum { Single, Zone, Section }


    bool flagForceSelectInject = false;

    GlobalSceneModel crEditScene = new GlobalSceneModel();
    GlobalSceneModel NewSceneParams = new GlobalSceneModel();
    List<GlobalSceneModel> LstScene = new List<GlobalSceneModel>();
    List<DeviceModel> LstDevice = new List<DeviceModel>();
    List<AreaModel> LstArea = new List<AreaModel>();
    List<ZoneModel> LstZone = new List<ZoneModel>();
    List<SectionModel> LstSection = new List<SectionModel>();
    List<GenActionsId> crLstEditActions = new List<GenActionsId>();
    List<GenActionsId> crEditLstAddActions = new List<GenActionsId>();
    List<GenActionsId> crNewLstAddActions = new List<GenActionsId>();
    List<MasterDataModel> LstMasterData = new List<MasterDataModel>();
    List<MasterDataModel.DeviceTypeModel> LstDeviceType = new List<MasterDataModel.DeviceTypeModel>();
    List<MasterDataModel.AttributeModel> LstAttribute = new List<MasterDataModel.AttributeModel>();

    ElementReference elFormEditSchedule, elFormNewSchedule, elCurrentSingleSelectBox1, elCurrentSingleSelectBox2, elCurrentMutipleSelectBox;
    //enum ScheduleTypeEnum { OneTime, Yearly, Monthly, Daily, IntervalTime }
    enum DayOfWeek { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday }
    enum FormAction { EditAddAction, NewAddAction, NewTargetDevice, EditExistTargetDevice, EditPlusTargetDevice }

    ScenesService svScene = new ScenesService();
    DeviceDataStore svDevice = new DeviceDataStore();
    LayoutAreaSevice svAreaLayout = new LayoutAreaSevice();
    MasterDataService svMasterData = new MasterDataService();
    string AccessToken = "";

    protected override async Task OnInitializedAsync()
    {
        AccessToken = await LocalStorage.GetItemAsync<string>("token");
        if (AccessToken == "")
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Please Sign In Again", false);
            NavHelper.NavigateTo("/login");
        }

        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "Initializing Data\nPlease Wait ...");
        LstScene = await svScene.GetScenesListAsync(AccessToken);
        LstDevice = await svDevice.GetOwnerDevicesListAsync(AccessToken);
        LstArea = await svAreaLayout.GetAreaListAsync(AccessToken);
        LstZone = await svAreaLayout.GetZoneListAsync(AccessToken);
        LstSection = await svAreaLayout.GetSectionListAsync(AccessToken);
        LstMasterData = await svMasterData.GetMasterDataListAsync(AccessToken);
        LstDeviceType = await svMasterData.GetDeviceTypeListAsync(AccessToken);
        LstAttribute = await svMasterData.GetAttributeListAsync(AccessToken);
        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", false, "");


        // In case navigate from query string
        //string queryScheduleId, queryDeviceId;
        //if (NavigationHelper.TryGetQueryString<string>(NavHelper, "scheduleId", out queryScheduleId) && queryScheduleId != null && NavigationHelper.TryGetQueryString<string>(NavHelper, "deviceId", out queryDeviceId) && queryDeviceId != null)
        //{
        //    var _objSchedule = await svShedule.GetScheduleAsync(Convert.ToInt32(queryScheduleId), AccessToken);

        //    await JSHelper.InvokeVoidAsync("Interop_ShowHideModal", "mdEditSchedule", "show");
        //    await JSHelper.InvokeVoidAsync("Interop_GotoUrlAsync", "cardEdit-" + queryDeviceId, 2000);

        //    InvokeAsync(StateHasChanged); // Error SelectBootstrap not load if not change state here
        //    PreEdit(_objSchedule);
        //}
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (flagForceSelectInject)
        {
            InjectSelectAfterModal(false);
            //Console.WriteLine("OnAfterRenderAsync");
        }

        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbEditJsAction", 300, false, false);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbNewJsAction", 300, false, false);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbEditJsDebug", 200, false, false);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbNewJsDebug", 200, false, false);
        JSHelper.InvokeVoidAsync("Interop_PurgeBootstrapSelectCache"); //TODO: Test comment this line
        if (!firstRender)
        {
            return;
        }
        JSHelper.InvokeVoidAsync("Interop_InjectBootstrapSelect");
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbEditJsAction", 300, true, false);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbNewJsAction", 300, true, false);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbEditJsDebug", 200, true, true);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbNewJsDebug", 200, true, true);
    }

    string GetCompareSign(MasterDataModel.CompareOperators _operator)
    {
        switch (_operator)
        {
            case MasterDataModel.CompareOperators.Equal:
                return "fas fa-equals";
            case MasterDataModel.CompareOperators.GreaterThan:
                return "fas fa-greater-than";
            case MasterDataModel.CompareOperators.GreaterThanOrEqual:
                return "fas fa-greater-than-equal";
            case MasterDataModel.CompareOperators.LessThan:
                return "fas fa-less-than";
            case MasterDataModel.CompareOperators.LessThanOrEqual:
                return "fas fa-less-than-equal";
            case MasterDataModel.CompareOperators.NotEqual:
                return "fas fa-not-equal";
            default:
                return "";
        }
    }

    async Task PushNewLstExpressionDevice(DeviceModel _dv)
    {
        if (NewSceneParams.Expressions.Count == 0)
        {

        }
    }

    async Task DeleteActionRow(RunningActionModel _obj)
    {
        crEditScene.Actions.Remove(_obj);
        InvokeAsync(StateHasChanged);
    }

    async Task ChangeScheduleStateHandle(GlobalSceneModel _item)
    {
        var _objScene = _item.ShallowCopy();
        _objScene.Enable = !_objScene.Enable;
        var result = await svScene.InsertUpdateItemAsync(_objScene, AccessToken);
        if (result)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "Schedule " + (_objScene.Enable ? "Enabled" : "Disabled"), true);

            //JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "Initializing Data\nPlease Wait ...");
            LstScene = await svScene.GetScenesListAsync(AccessToken);
            LstDevice = await svDevice.GetOwnerDevicesListAsync(AccessToken);
            LstZone = await svAreaLayout.GetZoneListAsync(AccessToken);
            LstSection = await svAreaLayout.GetSectionListAsync(AccessToken);
            //JSHelper.InvokeVoidAsync("Interop_Swal2spinner", false, "");
            InvokeAsync(StateHasChanged);
        }
        else
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Oops, Something Went Wrong", true);
        }
    }

    async Task DeleteItemHandle(GlobalSceneModel _item)
    {
        //    var isConfirm = await JSHelper.InvokeAsync<bool>("Interop_Swal2HelperAsync", "warning", "This action cannot be undone", "DELETE THIS SCHEDULE", "#C70039", "Cancel", false);
        //    if (!isConfirm) return;

        //    JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "");
        //    var result = await svShedule.DeleteScheduleAsync(_item.Id, AccessToken);
        //    if (result)
        //    {
        //        JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "Schedule Deleted", true);
        //        JSHelper.InvokeVoidAsync("Interop_ShowHideModal", "mdEditSchedule", "hide");

        //        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "Initializing Data\nPlease Wait ...");
        //        LstSchedule = await svShedule.GetItemsAsync(AccessToken);
        //        LstDevice = await svDevice.GetOwnerDevicesListAsync(AccessToken);
        //        LstZone = await svAreaLayout.GetZoneListAsync(AccessToken);
        //        LstSection = await svAreaLayout.GetSectionListAsync(AccessToken);
        //        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", false, "");
        //        InvokeAsync(StateHasChanged);
        //    }
        //    else
        //        JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Oops, Something Went Wrong", true);
    }

    async Task FormNewClose()
    {
        crNewLstAddActions.Clear();

        //reset list schedule in case user delete action in modal edit then close modal
        LstScene = await svScene.GetScenesListAsync(AccessToken);
        InvokeAsync(StateHasChanged);
    }

    async Task PreNew()
    {
        crNewLstAddActions.Clear();
    }

    async Task AddNewActionHandle(FormAction action)
    {
        if (action == FormAction.NewAddAction)
        {
            NewSceneParams.Actions.Add(new RunningActionModel());
        }
        //else if (action == FormAction.EditAddAction)
        //{
        //    crEditLstAddActions.Add(_tmpObj);
        //}
    }

    async Task FormEditClose()
    {
        crEditLstAddActions.Clear();
        crLstEditActions.Clear();

        //reset list sschedule in case user delete action in modal edit then close modal
        LstScene = await svScene.GetScenesListAsync(AccessToken);
        InvokeAsync(StateHasChanged);
    }

    async Task InjectSelectAfterModal(bool nextFlagState)
    {
        foreach (var card in crLstEditActions)
        {
            JSHelper.InvokeVoidAsync("Interop_InjectBootstrapSelectionById", "slEditTriggerDv-" + card.ActionId, card.ActionObj.DeviceId);

            //JSHelper.InvokeVoidAsync("Interop_InjectBootstrapSelectionById", "slEditACPower-" + card.ActionId, (int)Enum.Parse(typeof(ACPowerEnum), card.ActionObj.SetValues["ACPower"]));
            //JSHelper.InvokeVoidAsync("Interop_InjectBootstrapSelectionById", "slEditITMMode-" + card.ActionId, (int)Enum.Parse(typeof(itmACModeEnum), card.ActionObj.SetValues["itmACMode"]));
            //JSHelper.InvokeVoidAsync("Interop_InjectBootstrapSelectionById", "slEditFanSpeed-" + card.ActionId, (int)Enum.Parse(typeof(FanSpeedEnum), card.ActionObj.SetValues["FanSpeed"]));

            var LstAttrKey = card.ActionObj.SetValues.Select(r => r.Key).ToList();

            foreach (var attr in LstAttrKey)
            {
                JSHelper.InvokeVoidAsync("Interop_InjectBootstrapSelectionById", "slEdit" + attr + "-" + card.ActionId, card.ActionObj.SetValues[attr]);
            }

            JSHelper.InvokeVoidAsync("Interop_InjectBootstrapSelectionById", "slEditDeviceAttribute-" + card.ActionId, LstAttrKey);
        }
        flagForceSelectInject = nextFlagState;
    }

    string GenSelectElementId(string firstName, string lastName)
    {
        return firstName + lastName;
    }

    async Task PreEdit(GlobalSceneModel _item)
    {
        crLstEditActions.Clear();
        crEditScene = _item.ShallowCopy();

        flagForceSelectInject = true;

        var _tmpItemOnjectId = crEditScene.Actions.Select(r => new { objItem = r, idItem = Guid.NewGuid().ToString("N") }).ToList();
        foreach (var it in _tmpItemOnjectId)
        {
            crLstEditActions.Add(new GenActionsId { ActionId = it.idItem, ActionObj = it.objItem });
        }
        // Parse some value to correct format
        JSHelper.InvokeVoidAsync("Interop_SummerSetCode", "tbEditJsAction", crEditScene.JavaScriptCode, 350);
        // TODO: fix here 
        //var txtDebug = svShedule.GetDebugAsync(crEditScene.Id, AccessToken);
        //JSHelper.InvokeVoidAsync("Interop_SummerSetCode", "tbEditJsDebug", txtDebug, 200);

        await JSHelper.InvokeVoidAsync("Interop_PurgeBootstrapSelectCache");
        JSHelper.InvokeVoidAsync("Interop_PurgeValidBtCache");
        await InvokeAsync(StateHasChanged);
    }

    //async Task<int> SelectAndBindSingleByIdJquery(string slElId)
    //{
    //    var slKeyItem = await JSHelper.InvokeAsync<string>("Interop_DisplayChangeByJqueryId", slElId);
    //    return await Task.FromResult(int.Parse(slKeyItem));
    //}

    async Task<string> jQuerySelectAndBindSingleTextReturn()
    {
        var slKeyItem = await JSHelper.InvokeAsync<string>("Interop_jQueryDisplayChange");
        return await Task.FromResult(slKeyItem);
    }

    async Task<string> SelectAndBindSingleTextReturn()
    {
        var _tmpSelectArr = await JSHelper.InvokeAsync<ArrayList>("Interop_DisplayChange", elCurrentSingleSelectBox1);
        var slKeyItem = _tmpSelectArr[0];
        return await Task.FromResult(slKeyItem.ToString());
    }

    async Task<int> SelectAndBindSingle()
    {
        var _tmpSelectArr = await JSHelper.InvokeAsync<ArrayList>("Interop_DisplayChange", elCurrentSingleSelectBox1);
        var slKeyItem = _tmpSelectArr[0];
        return await Task.FromResult(int.Parse(slKeyItem.ToString()));
    }

    private async Task SelectAndBindMultiAttr(Dictionary<string, string> refSetValues)
    {
        var _tmpSelectArr = await JSHelper.InvokeAsync<ArrayList>("Interop_DisplayChange", elCurrentMutipleSelectBox);
        var ParseValue = _tmpSelectArr[0].ToString();
        if (_tmpSelectArr[1] == null) return; // some time random error here so this is fix
        var stateOfValue = bool.Parse(_tmpSelectArr[1].ToString());
        if (stateOfValue)
        {
            if (!refSetValues.ContainsKey(ParseValue)) refSetValues.Add(ParseValue, null);
        }
        else
        {
            if (refSetValues.ContainsKey(ParseValue)) refSetValues.Remove(ParseValue);
        }
        InvokeAsync(StateHasChanged);
    }

    async Task SelectAndBindMultiTargetDevice(FormAction eventHandle, RunningActionModel _action)
    {
        var _tmpSelectArr = await JSHelper.InvokeAsync<ArrayList>("Interop_DisplayChange");
        var ParseValue = int.Parse(_tmpSelectArr[0].ToString());
        if (_tmpSelectArr[1] == null) return; // some time random error here so this is fix
        var stateOfValue = bool.Parse(_tmpSelectArr[1].ToString());
        if (stateOfValue == true)
        {
            if (eventHandle == FormAction.NewTargetDevice)
            {
                if (_action.LstDeviceId.Contains(ParseValue) == false)
                {
                    _action.LstDeviceId.Add(ParseValue);
                }
            }
        }
        else
        {
            if (eventHandle == FormAction.NewTargetDevice)
            {
                if (_action.LstDeviceId.Contains(ParseValue) == true)
                {
                    _action.LstDeviceId.Remove(ParseValue);
                }
            }
        }
    }
    async Task SelectAndBindMulti(FormAction action)
    {
        //var _tmpSelectArr = await JSHelper.InvokeAsync<ArrayList>("Interop_DisplayChange");
        //var ParseValue = int.Parse(_tmpSelectArr[0].ToString());
        //if (_tmpSelectArr[1] == null) return; // some time random error here so this is fix
        //var stateOfValue = bool.Parse(_tmpSelectArr[1].ToString());
        //if (stateOfValue == true)
        //{
        //    if (action == FormAction.NewTargetDevice)
        //    {
        //        if (!NewSceneParams.Actions.)
        //        {
        //            NewSceneParams.RepeatDayOfWeek.Add(ParseValue);
        //        }
        //    }
        //}
        //else
        //{
        //    if (action == FormAction.NewTargetDevice)
        //    {
        //        if (NewInterlockParams.RepeatDayOfWeek.Contains(ParseValue))
        //        {
        //            NewInterlockParams.RepeatDayOfWeek.Remove(ParseValue);
        //        }
        //    }
        //}
    }

    async Task FormNewSubmitInterlock()
    {
        var isFormValid = await JSHelper.InvokeAsync<bool>("Interop_FormValidate", elFormNewSchedule);
        if (!isFormValid)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "warning", "Please fill all required field", true);
            return;
        }

        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "");

        // add local list (crEditLstAddActions + crLstEditActions) to crEditScene
        //NewInterlockParams.Actions.AddRange(crNewLstAddActions.Select(r => r.ActionObj));

        // Convert Some Prop to correct format
        if (NewSceneParams.IsJavaScriptType)
        {
            NewSceneParams.JavaScriptCode = await JSHelper.InvokeAsync<string>("Interop_SummerGetCode", "tbNewJsAction");
        }

        // Run script to gen list select mutiple device
        NewSceneParams.ReGenerateActionsFromGroupDvId();

        var resultDvId = await svScene.InsertUpdateItemAsync(NewSceneParams, AccessToken);
        if (resultDvId == false)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Some thing went wrong", false);
            return;
        }
        JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "Device Id <strong>" + resultDvId.ToString() + "</strong> Added", false);

        JSHelper.InvokeVoidAsync("Interop_ShowHideModal", "mdNewScene", "hide");
        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "Initializing Data\nPlease Wait ...");
        //LstSchedule = await svShedule.GetItemsAsync(AccessToken); // this is already called in FormNewClose()
        //LstDevice = await svDevice.GetOwnerDevicesListAsync(AccessToken);
        //LstZone = await svAreaLayout.GetZoneListAsync(AccessToken);
        //LstSection = await svAreaLayout.GetSectionListAsync(AccessToken);
        FormNewClose();
        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", false, "");
        InvokeAsync(StateHasChanged);
    }

    async Task FormEditScheduleHandle()
    {
        //var isFormValid = await JSHelper.InvokeAsync<bool>("Interop_FormValidate", elFormEditSchedule);
        //if (!isFormValid)
        //{
        //    JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "warning", "Please fill all required field", true);
        //    return;
        //}

        //JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "");

        //// add local list (crEditLstAddActions + crLstEditActions) to crEditScene
        //crEditScene.Actions.AddRange(crEditLstAddActions.Select(r => r.ActionObj));

        //// Convert Some Prop to correct format
        //crEditScene.Time = crDatetimeBinding.Value.ToUnixTimeSeconds();
        //if (crEditScene.IsJavaScriptAction)
        //{
        //    crEditScene.JavaScriptAction = await JSHelper.InvokeAsync<string>("Interop_SummerGetCode", "tbEditJsAction");
        //}
        //var result = await svScene.InsertUpdateItemAsync(crEditScene, AccessToken);
        //if (result)
        //{
        //    JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "Schedule Updated", true);
        //    JSHelper.InvokeVoidAsync("Interop_ShowHideModal", "mdEditSchedule", "hide");

        //    JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "Initializing Data\nPlease Wait ...");
        //    //LstSchedule = await svShedule.GetItemsAsync(AccessToken); // this is already called in FormEditClose()
        //    LstDevice = await svDevice.GetOwnerDevicesListAsync(AccessToken);
        //    LstZone = await svAreaLayout.GetZoneListAsync(AccessToken);
        //    LstSection = await svAreaLayout.GetSectionListAsync(AccessToken);
        //    FormEditClose();
        //    JSHelper.InvokeVoidAsync("Interop_Swal2spinner", false, "");
        //    InvokeAsync(StateHasChanged);
        //}
        //else
        //    JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Oops, Something Went Wrong", true);
    }

    class GenActionsId
    {
        public RunningActionModel ActionObj { get; set; }
        public string ActionId { get; set; }
    }
}