@page "/interlock"
@inject NavigationManager uriHelper
@using BlazorDateRangePicker
@using Helper
@inject IJSRuntime JSHelper
@using SmartRetail.Shared
@using SmartRetail.Client.Services
@using Share.Models
@using System.Collections
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavHelper
@using System


<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col text-center">
                    <h1 style="font-size:50px;">Interlock Profiles</h1>
                </div>
            </div><!-- /.row -->
        </div><!-- /.container-fluid -->
    </section>
    <!-- /.content-header -->
    <!-- Main content -->
    <section class="content">
        <div class="container-fluid">

            <div class="card card-primary">
                <div class="card-body">
                    <button class="btn btn-success m-2"
                            type="button"
                            data-toggle="modal"
                            data-target="#mdNewScene"
                            @onclick=@(()=>
                                       {
                                           NewSceneParams = new GlobalSceneModel();
                                           InvokeAsync(StateHasChanged);
                                       })>
                        Add New Interlock
                    </button>

                    <table class="bootstrap-table"
                           data-search="true"
                           data-show-export="true"
                           data-search-align="right"
                           data-buttons-align="right"
                           data-pagination="true"
                           data-height="700">
                        <thead>
                            <tr class="text-center">
                                <th>No.</th>
                                <th>NAME</th>
                                <th>ENABLE</th>
                                <th>LAST RUN</th>
                                <th>CONTROL</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                foreach (var profile in LstScene.OrderByDescending(r=>r.Id))
                                {
                                    <tr class="text-center">
                                        <th>@profile.Id</th>
                                        <td>@profile.Name</td>
                                        @{ if (profile.Enable)
                                            {
                                                <td>
                                                    <span class="badge badge-pill badge-success">Enable</span>

                                                </td>
                                            }
                                            else
                                            {
                                                <td>
                                                    <span class="badge badge-pill badge-danger">Disable</span>
                                                </td>
                                            }
                                        }
                                        <td>@UnixTime.UnixMillisToLocalTimeFormat(profile.LastRunTime)</td>
                                        <td>
                                            <div class="d-flex flex-wrap">
                                                <button class="btn btn-xs btn-primary m-1"
                                                        type="button"
                                                        data-toggle="modal"
                                                        data-target="#mdEditScene"
                                                        @onclick=@(() => { PreEdit(profile); })>
                                                    <i class="fas fa-edit"></i>
                                                </button>

                                                @{
                                                    string attrBtnEnable = profile.Enable ? "light" : "success";
                                                    var titleTooltip = profile.Enable ? "Disable Schedule" : "Enable Schedule";
                                                }
                                                <button data-toggle="tooltip"
                                                        data-placement="top"
                                                        title="@titleTooltip" class="btn btn-xs btn-@attrBtnEnable m-1"
                                                        @onclick=@(() => { ChangeScheduleStateHandle(profile); })>
                                                    <i class="fas fa-power-off"></i>
                                                </button>

                                                <button data-toggle="tooltip"
                                                        data-placement="top"
                                                        title="Clone" class="btn btn-xs btn-info m-1"
                                                        @onclick=@(() =>
                                                                       {
                                                                           CloneProfileHanlde(profile);
                                                                       })>
                                                    <i class="far fa-clone"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Modal New Schedule -->
            <div class="modal animate__animated animate__bounceInUp" data-backdrop="static" data-keyboard="false" id="mdNewScene" tabindex="-1">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header bg-info text-white d-flex justify-content-center flex-column text-center">
                            <h1 class="modal-title w-100">
                                <i class="fas fa-plus-circle"></i>
                            </h1>
                            <h2 class="modal-title w-100">
                                New Interlock Profile
                            </h2>
                        </div>

                        <div class="modal-body">
                            <form @ref="elFormNewScene"
                                  class="needs-validation"
                                  id="formNewWorker"
                                  novalidate>

                                <fieldset class="border p-2">
                                    <legend class="w-auto">Basic Info</legend>

                                    <div class="form-group row">
                                        <label class="col-sm-2 col-form-label">
                                            <i class="fas fa-info-circle"></i>
                                            Interlock Name
                                        </label>
                                        <div class="col-sm-10">
                                            <input @bind-value="NewSceneParams.Name"
                                                   type="text"
                                                   class="form-control"
                                                   placeholder="-- Name of new Interlock --"
                                                   required />
                                        </div>
                                    </div>
                                </fieldset>

                                <fieldset class="border p-2">
                                    <legend class="w-auto">
                                        <h2 class="font-weight-bolder font-italic">IF STATEMENT</h2>
                                    </legend>

                                    <div class="container-fluid">
                                        @foreach (var _express in NewSceneParams.Expressions)
                                        {
                                            int idx = NewSceneParams.Expressions.IndexOf(_express);

                                            <div class="row align-items-center"
                                                 id="row-@_express.RandExpId">
                                                <div class="col-auto">
                                                    <button class="btn btn-outline-danger btn-xs"
                                                            type="button"
                                                            @onclick=@(() => { NewSceneParams.Expressions.Remove(_express); InvokeAsync(StateHasChanged); })>
                                                        <i class="fas fa-trash-alt"></i>
                                                    </button>
                                                </div>

                                                @if (_express.IsLogicExpression == true)
                                                {
                                                    if (_express.Logic == LogicExpression.OpenpArenthesis)
                                                    {
                                                        <div class="col-auto">
                                                            <img src="public/img/bracket_left.png" style="background:green;" />
                                                        </div>
                                                    }
                                                    else if (_express.Logic == LogicExpression.CloseParenthesis)
                                                    {
                                                        <div class="col-auto">
                                                            <img src="public/img/bracket_right.png" style="background:green;" />
                                                        </div>
                                                    }
                                                    else if (_express.Logic == LogicExpression.And)
                                                    {
                                                        <div class="col-auto">
                                                            <h3>AND</h3>
                                                        </div>
                                                    }
                                                    else if (_express.Logic == LogicExpression.Or)
                                                    {
                                                        <div class="col-auto">
                                                            <h3>OR</h3>
                                                        </div>
                                                    }
                                                    else if (_express.Logic == LogicExpression.Not)
                                                    {
                                                        <div class="col-auto">
                                                            <h3>NOT</h3>
                                                        </div>
                                                    }

                                                    <div class="col-3">
                                                        <select title="-- Select Expression --"
                                                                id="slNewCondLogicExpress-@idx"
                                                                data-style="btn-light btn-sm"
                                                                class="form-control selectpicker"
                                                                required
                                                                @onchange=@(async()=>
                                                                                    {
                                                                                       var _tmpKey =  await SelectAndBindSingle();
                                                                                        NewSceneParams.Expressions.ElementAtOrDefault(idx).Logic = (LogicExpression)_tmpKey;
                                                                                    })>
                                                            @foreach (var obj in Enum.GetValues(typeof(LogicExpression)))
                                                            {
                                                                var value = Enum.GetName(typeof(LogicExpression), obj);
                                                                var key = (int)obj;
                                                                <option value="@key">@value</option>
                                                            }
                                                        </select>
                                                    </div>
                                                }
                                                else if (_express.IsLogicExpression == false)
                                                {
                                                    var _objDevice = LstDevice.Where(r => r.Id == _express.DeviceId).FirstOrDefault();

                                                    <div class="col-3">
                                                        <div class="info-box">
                                                            <div class="info-box-content">
                                                                <select title="-- Select AC --"
                                                                        id="slNewCondDevice-@idx"
                                                                        data-style="btn-light btn-sm"
                                                                        class="form-control selectpicker"
                                                                        data-live-search="true"
                                                                        @onchange=@(async()=>
                                                                                    {
                                                                                       var _tmpKey =  await SelectAndBindSingle();
                                                                                        NewSceneParams.Expressions.ElementAtOrDefault(idx).DeviceId = _tmpKey;
                                                                                    })>
                                                                    @foreach (var _dv in LstDevice)
                                                                    {
                                                                        var resultSubText = "";
                                                                        var secOfDv = LstSection.Where(r => r.Id == _dv.SectionId).FirstOrDefault();
                                                                        if (secOfDv != default)
                                                                        {
                                                                            var zoneOfDv = LstZone.Where(r => r.Id == secOfDv.Zone).FirstOrDefault();
                                                                            if (zoneOfDv != default)
                                                                            {
                                                                                var areaOfDv = LstArea.Where(r => r.Id == zoneOfDv.Area).FirstOrDefault();
                                                                                if (areaOfDv != default)
                                                                                {
                                                                                    resultSubText = areaOfDv.Name + " > " + zoneOfDv.Name + " > " + secOfDv.Name;
                                                                                }
                                                                            }
                                                                        }
                                                                        <option data-subtext="@resultSubText" value="@_dv.Id">[@_dv.Capabilitie] @_dv.Id - @_dv.Name</option>
                                                                    }
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-2">
                                                        <div class="info-box">
                                                            <span class="info-box-icon bg-info">
                                                                <i class="@GetCompareSign(NewSceneParams.Expressions.ElementAtOrDefault(idx).Comparison)"></i>
                                                            </span>
                                                            <div class="info-box-content">
                                                                <select title="-- Change --"
                                                                        id="slNewCondOperator-@idx"
                                                                        data-style="btn-light btn-sm"
                                                                        class="form-control selectpicker"
                                                                        @onchange=@(async()=>
                                                                                    {
                                                                                       var _tmpKey =  await SelectAndBindSingle();
                                                                        NewSceneParams.Expressions.ElementAtOrDefault(idx).Comparison = (MasterDataModel.CompareOperators)_tmpKey;
                                                                    })>
                                                                    @foreach (var obj in Enum.GetValues(typeof(MasterDataModel.CompareOperators)))
                                                                    {
                                                                        var value = Enum.GetName(typeof(MasterDataModel.CompareOperators), obj);
                                                                        var key = (int)obj;
                                                                        <option value="@key">@value</option>
                                                                    }
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-3">
                                                        <div class="info-box">
                                                            <div class="info-box-content">
                                                                <select title="-- Select Attribute --"
                                                                        id="slNewCondDeviceAttr-@idx"
                                                                        data-style="btn-light btn-sm"
                                                                        class="form-control selectpicker mb-2"
                                                                        data-live-search="true"
                                                                        required
                                                                        @onchange=@(async()=>
                                                                                    {
                                                                                        var _tmpKey = await SelectAndBindSingleTextReturn();
                                                                                        NewSceneParams.Expressions.ElementAtOrDefault(idx).Attribute = _tmpKey;
                                                                                    })>
                                                                    @{
                                                                        var _dictDvAttr = LstDevice.Where(r => r.Id == _express.DeviceId).FirstOrDefault()?.Status;
                                                                        if (_dictDvAttr != default)
                                                                        {
                                                                            foreach (var DvAttr in _dictDvAttr)
                                                                            {
                                                                                <option value="@DvAttr.Key">@DvAttr.Key</option>
                                                                            }
                                                                        }
                                                                    }
                                                                </select>

                                                                @{
                                                                    var _DetailOfAttr = LstAttribute.Where(r => r.Name == NewSceneParams.Expressions.ElementAtOrDefault(idx).Attribute).FirstOrDefault();
                                                                    if (_DetailOfAttr != default)
                                                                    {
                                                                        if (_DetailOfAttr.ValueType == SERVER_TYPES.Enum || _DetailOfAttr.ValueType == SERVER_TYPES.Array)
                                                                        {
                                                                            <select class="form-control"
                                                                                    required
                                                                                    id=@("slNewCondDeviceAttr" + _DetailOfAttr.Name + "-" + _express.RandExpId)
                                                                                    @onchange=@(async () =>
                                                                                                {
                                                                                                    var _tmpKey = await jQuerySelectAndBindSingleTextReturn();
                                                                                                    NewSceneParams.Expressions.ElementAtOrDefault(idx).CompareValue = _tmpKey;
                                                                                                })>

                                                                                <option value="">-- Select --</option>
                                                                                @foreach (var _valRange in _DetailOfAttr.ValueRange)
                                                                                {
                                                                                    <option value="@_valRange">
                                                                                        @_valRange
                                                                                    </option>
                                                                                }
                                                                            </select>
                                                                        }
                                                                        else if (_DetailOfAttr.ValueType == SERVER_TYPES.Double)
                                                                        {
                                                                            <input class="form-control"
                                                                                   type="number"
                                                                                   @bind-value="@NewSceneParams.Expressions.ElementAtOrDefault(idx).CompareValue"
                                                                                   required
                                                                                   step="0.01"
                                                                                   min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                   max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                        }
                                                                        else if (_DetailOfAttr.ValueType == SERVER_TYPES.String)
                                                                        {
                                                                            <input class="form-control"
                                                                                   type="text"
                                                                                   @bind-value="@NewSceneParams.Expressions.ElementAtOrDefault(idx).CompareValue" />
                                                                        }
                                                                        else if (_DetailOfAttr.ValueType == SERVER_TYPES.Integer)
                                                                        {
                                                                            <input class="form-control"
                                                                                   type="number"
                                                                                   @bind-value="@NewSceneParams.Expressions.ElementAtOrDefault(idx).CompareValue"
                                                                                   step="1"
                                                                                   required
                                                                                   min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                   max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                        }
                                                                    }
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-3">
                                                        <div class="info-box">
                                                            <span class="info-box-icon bg-info">
                                                                <i class="fas fa-stopwatch"></i>
                                                            </span>
                                                            <div class="info-box-content">
                                                                <div class="input-group input-group-sm">
                                                                    <input type="number"
                                                                           class="form-control"
                                                                           min="0"
                                                                           step="1"
                                                                           placeholder="Interval Time"
                                                                           required
                                                                           @bind-value="NewSceneParams.Expressions.ElementAtOrDefault(idx).Interval">
                                                                    <div class="input-group-append">
                                                                        <span class="input-group-text">
                                                                            sec
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                }
                                            </div>
                                        }

                                        <div class="btn-group" role="group">
                                            <button type="button"
                                                    class="btn btn-primary"
                                                    @onclick=@(()=>
                                                               {
                                                                   NewSceneParams.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = true, Logic= LogicExpression.None});
                                                               })>
                                                <i class="fas fa-plus"></i>
                                                Command
                                            </button>
                                            <button type="button"
                                                    class="btn btn-info"
                                                    @onclick=@(()=>
                                                                   {
                                                                       NewSceneParams.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = false, Comparison= MasterDataModel.CompareOperators.Equal });
                                                                   })>
                                                <i class="fas fa-plus"></i>
                                                Trigger Block
                                            </button>
                                        </div>
                                    </div>
                                </fieldset>

                                <fieldset class="border p-2">
                                    <legend class="w-auto">
                                        <h2 class="font-weight-bolder font-italic">THEN</h2>
                                    </legend>

                                    <div class="row">
                                        <button class="btn btn-success m-3 btn-block"
                                                type="button"
                                                @onclick=@(() =>
                                                           {
                                                               NewSceneParams.Actions.Add(new RunningActionModel());
                                                               RefilterDvList(NewSceneParams);
                                                           })>
                                            <i class="fas fa-plus-circle"></i>
                                            ADD NEW ACTIONS
                                        </button>
                                    </div>

                                    @foreach (var _card in NewSceneParams.Actions)
                                    {
                                        <div class="callout callout-primary">
                                            <div class="mb-4 d-flex">
                                                <h4 class="mr-auto">
                                                    <span class="badge badge-pill badge-primary">NEW</span>
                                                </h4>

                                                <button class="btn btn-outline-danger"
                                                        type="button"
                                                        @onclick=@(() =>
                                                                   {
                                                                       NewSceneParams.Actions.Remove(_card);
                                                                       RefilterDvList(NewSceneParams);
                                                                   })>
                                                    <i class="far fa-trash-alt"></i>
                                                </button>
                                            </div>

                                            <div class="row">

                                                @{
                                                    var _dvType = "AC";
                                                    //_dvType = @LstDevice.Where(r => r.Id == _card?.LstDeviceId.FirstOrDefault()).FirstOrDefault()?.DeviceType;
                                                }

                                                <div class="form-group col-5">
                                                    <label>
                                                        Target AC
                                                    </label>
                                                    <div class="input-group ">
                                                        <select class="selectpicker form-control"
                                                                title="-- Select --"
                                                                data-style="btn-primary"
                                                                data-live-search="true"
                                                                multiple
                                                                required
                                                                @onchange=@(async () =>
                                                                            {
                                                                                SelectAndBindMultiTargetDevice(_card);
                                                                            })>
                                                            @foreach (var _dv in LstDevice.Where(r => r.DeviceType == "AC"))
                                                            {
                                                                var resultSubText = "";
                                                                var secOfDv = LstSection.Where(r => r.Id == _dv.SectionId).FirstOrDefault();
                                                                if (secOfDv != default)
                                                                {
                                                                    var zoneOfDv = LstZone.Where(r => r.Id == secOfDv.Zone).FirstOrDefault();
                                                                    if (zoneOfDv != default)
                                                                    {
                                                                        var areaOfDv = LstArea.Where(r => r.Id == zoneOfDv.Area).FirstOrDefault();
                                                                        if (areaOfDv != default)
                                                                        {
                                                                            resultSubText = areaOfDv.Name + " > " + zoneOfDv.Name + " > " + secOfDv.Name;
                                                                        }
                                                                    }
                                                                }
                                                                <option data-subtext="@resultSubText" value="@_dv.Id">[@_dv.Capabilitie] @_dv.Id - @_dv.Name</option>
                                                            }
                                                        </select>
                                                    </div>


                                                    <label class="m-3">
                                                        Attributes
                                                    </label>
                                                    <div class="input-group">
                                                        <select title="-- Select Attributes --"
                                                                data-style="btn-primary"
                                                                class="form-control selectpicker"
                                                                multiple
                                                                data-actions-box="true"
                                                                data-live-search="true"
                                                                @onchange=@(async()=>
                                                                            {
                                                                                await SelectAndBindMultiAttr(_card.SetValues);
                                                                            })>
                                                            @{
                                                                if (_dvType != String.Empty && _dvType != "" && _dvType != null)
                                                                {
                                                                    var _lstAttrOfDvType = LstDeviceType.Where(r => r.Name == _dvType).FirstOrDefault().Attributes;
                                                                    foreach (var _attr in _lstAttrOfDvType)
                                                                    {
                                                                        <option value="@_attr">@_attr</option>
                                                                    }
                                                                }
                                                            }
                                                        </select>
                                                    </div>
                                                </div>


                                                <div class="col-7">
                                                    <div class="callout callout-primary">
                                                        <div class="d-flex">
                                                            <div class=" flex-grow-1">
                                                                <ul style="list-style-type: none;">
                                                                    @foreach (var dv in _card.DeviceList)
                                                                    {
                                                                        var objDv = LstDevice.Where(r => r.Id == dv).FirstOrDefault();
                                                                        <li>
                                                                            <span class="badge badge-pill badge-primary">
                                                                                @objDv.Id
                                                                            </span>
                                                                            - [@objDv.Capabilitie] @objDv.Name
                                                                        </li>
                                                                    }
                                                                </ul>
                                                            </div>
                                                        </div>

                                                        <div class="col-12">
                                                            <hr class="dotted">
                                                        </div>

                                                        <div class="row">
                                                            @{
                                                                foreach (var _attr in _card?.SetValues)
                                                                {
                                                                    var _DetailOfAttr = LstAttribute.Where(r => r.Name == _attr.Key).FirstOrDefault();
                                                                    <div class="form-group col-4">
                                                                        <label>
                                                                            @_attr.Key
                                                                        </label>
                                                                        <div class="input-group ">
                                                                            @if (_DetailOfAttr.ValueType == SERVER_TYPES.Enum || _DetailOfAttr.ValueType == SERVER_TYPES.Array)
                                                                            {
                                                                                <select title="-- Select --"
                                                                                        class="form-control selectpicker"
                                                                                        data-style="btn-light"
                                                                                        required
                                                                                        @onchange=@(async () =>
                                                                                                    {
                                                                                                        var _tmpKeys = await SelectAndBindSingleTextReturn();
                                                                                                        _card.SetValues[_attr.Key] = _tmpKeys;
                                                                                                    })>

                                                                                    @foreach (var _valRange in _DetailOfAttr.ValueRange)
                                                                                    {
                                                                                        <option value="@_valRange">
                                                                                            @_valRange
                                                                                        </option>
                                                                                    }
                                                                                </select>
                                                                            }
                                                                            else if (_DetailOfAttr.ValueType == SERVER_TYPES.Double)
                                                                            {
                                                                                <input class="form-control"
                                                                                       type="number"
                                                                                       @bind-value="@_card.SetValues[_attr.Key]"
                                                                                       required
                                                                                       step="0.01"
                                                                                       min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                       max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                            }
                                                                            else if (_DetailOfAttr.ValueType == SERVER_TYPES.String)
                                                                            {
                                                                                <input class="form-control"
                                                                                       type="text"
                                                                                       required
                                                                                       @bind-value="@_card.SetValues[_attr.Key]" />
                                                                            }
                                                                            else if (_DetailOfAttr.ValueType == SERVER_TYPES.Integer)
                                                                            {
                                                                                <input class="form-control"
                                                                                       type="number"
                                                                                       @bind-value="@_card.SetValues[_attr.Key]"
                                                                                       step="1"
                                                                                       required
                                                                                       min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                       max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                }
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </fieldset>

                                @if (CurrentUser.Roles.Contains(Role.System))
                                {
                                    <fieldset class="border p-2">
                                        <legend class="w-auto">
                                            <div class="form-group">
                                                <div class="custom-control custom-switch">
                                                    <input type="checkbox"
                                                           id="swNewJsAction"
                                                           @bind-value="NewSceneParams.IsJavaScriptType"
                                                           class="custom-control-input">
                                                    <label class="custom-control-label"
                                                           for="swNewJsAction">
                                                        Custom JavaScript Actions
                                                    </label>
                                                </div>
                                            </div>
                                        </legend>

                                        @if (NewSceneParams.IsJavaScriptType)
                                        {
                                            <div class="form-group row">
                                                <label class="col-sm-2 col-form-label">
                                                    <i class="fas fa-user-edit"></i>
                                                    Custom JavaScript
                                                </label>
                                                <div class="col-sm-10">
                                                    <textarea class="summernote"
                                                              required=@(NewSceneParams.IsJavaScriptType ? true : false)
                                                              id="tbNewJsAction"></textarea>
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <label class="col-sm-2 col-form-label"></label>
                                                <div class="col-sm-10">
                                                    <div class="d-flex justify-content-center">
                                                        <div class="btn-group btn-group-sm" role="group">
                                                            <button type="button" class="btn btn-primary">
                                                                Run
                                                            </button>

                                                            <button type="button" class="btn btn-danger">
                                                                Stop
                                                            </button>

                                                            <button type="button" class="btn btn-primary">
                                                                Reload Data
                                                            </button>

                                                            <button type="button" class="btn btn-primary">
                                                                Save
                                                            </button>

                                                            <button type="button" class="btn btn-primary">
                                                                Close
                                                            </button>

                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <label class="col-sm-2 col-form-label"></label>
                                                <div class="col-sm-10">
                                                    <textarea class="summernote"
                                                              id="tbNewJsDebug"></textarea>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-warning" role="alert">
                                                Javascript Action is not in used
                                            </div>
                                        }
                                    </fieldset>
                                }
                            </form>
                        </div>

                        <div class="modal-footer d-flex justify-content-center">
                            <button type="button" class="btn btn-lg btn-outline-info"
                                    data-dismiss="modal">
                                Cancle
                            </button>
                            <button type="button"
                                    class="btn btn-info btn-lg"
                                    @onclick=@(() => { FormNewSubmitScene(); })>
                                Create
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Modal Edit Schedule -->
            <div class="modal animate__animated animate__bounceInUp" data-backdrop="static" data-keyboard="false" id="mdEditScene" tabindex="-1">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header bg-info text-white d-flex justify-content-center flex-column text-center">
                            <h1 class="modal-title w-100">
                                <i class="fas fa-cogs"></i>
                            </h1>
                            <h2 class="modal-title w-100">
                                Edit Interlock
                            </h2>
                        </div>

                        <div class="modal-body">
                            <form @ref="elFormEditScene"
                                  class="needs-validation"
                                  id="formEditWorker"
                                  novalidate>

                                <fieldset class="border p-2">
                                    <legend class="w-auto">Basic Info</legend>

                                    <div class="form-group row">
                                        <label class="col-sm-2 col-form-label">
                                            <i class="fas fa-info-circle"></i>
                                            Interlock Name
                                        </label>
                                        <div class="col-sm-10">
                                            <input @bind-value="crEditScene.Name"
                                                   type="text"
                                                   class="form-control"
                                                   required />
                                        </div>
                                    </div>
                                </fieldset>

                                <fieldset class="border p-2">
                                    <legend class="w-auto">
                                        <h2 class="font-weight-bolder font-italic">IF STATEMENT</h2>
                                    </legend>

                                    <div class="container-fluid">

                                        @foreach (var _express in crEditScene.Expressions)
                                        {
                                            int idx = crEditScene.Expressions.IndexOf(_express);

                                            <div class="row align-items-center">
                                                <div class="col-auto">
                                                    <button class="btn btn-outline-danger btn-xs"
                                                            type="button"
                                                            @onclick=@(() => { crEditScene.Expressions.Remove(_express); })>
                                                        <i class="fas fa-trash-alt"></i>
                                                    </button>
                                                </div>

                                                @if (_express.IsLogicExpression == true)
                                                {
                                                    if (_express.Logic == LogicExpression.OpenpArenthesis)
                                                    {
                                                        <div class="col-auto">
                                                            <img src="public/img/bracket_left.png" style="background:green;" />
                                                        </div>
                                                    }
                                                    else if (_express.Logic == LogicExpression.CloseParenthesis)
                                                    {
                                                        <div class="col-auto">
                                                            <img src="public/img/bracket_right.png" style="background:green;" />
                                                        </div>
                                                    }
                                                    else if (_express.Logic == LogicExpression.And)
                                                    {
                                                        <div class="col-auto">
                                                            <h3>AND</h3>
                                                        </div>
                                                    }
                                                    else if (_express.Logic == LogicExpression.Or)
                                                    {
                                                        <div class="col-auto">
                                                            <h3>OR</h3>
                                                        </div>
                                                    }
                                                    else if (_express.Logic == LogicExpression.Not)
                                                    {
                                                        <div class="col-auto">
                                                            <h3>NOT</h3>
                                                        </div>
                                                    }

                                                    <div class="col-3">
                                                        <select title="-- Change --"
                                                                id="slEditCondLogicExpress-@idx"
                                                                data-style="btn-light btn-sm"
                                                                class="form-control selectpicker"
                                                                @onchange=@(async()=>
                                                                                    {
                                                                                       var _tmpKey =  await SelectAndBindSingle();
                                                                                        crEditScene.Expressions.ElementAtOrDefault(idx).Logic = (LogicExpression)_tmpKey;
                                                                                    })>
                                                            @foreach (var obj in Enum.GetValues(typeof(LogicExpression)))
                                                            {
                                                                var value = Enum.GetName(typeof(LogicExpression), obj);
                                                                var key = (int)obj;
                                                                <option value="@key">@value</option>
                                                            }
                                                        </select>
                                                    </div>
                                                }
                                                else if (_express.IsLogicExpression == false)
                                                {
                                                    var _objDevice = LstDevice.Where(r => r.Id == _express.DeviceId).FirstOrDefault();

                                                    <div class="col-3">
                                                        <div class="info-box">
                                                            <div class="info-box-content">
                                                                <select title="-- Change AC --"
                                                                        id="slEditCondDevice-@idx"
                                                                        data-style="btn-light btn-sm"
                                                                        class="form-control selectpicker"
                                                                        data-live-search="true"
                                                                        @onchange=@(async()=>
                                                                                    {
                                                                                       var _tmpKey =  await SelectAndBindSingle();
                                                                                        crEditScene.Expressions.ElementAtOrDefault(idx).DeviceId = _tmpKey;
                                                                                    })>
                                                                    @foreach (var _dv in LstDevice)
                                                                    {
                                                                        var resultSubText = "";
                                                                        var secOfDv = LstSection.Where(r => r.Id == _dv.SectionId).FirstOrDefault();
                                                                        if (secOfDv != default)
                                                                        {
                                                                            var zoneOfDv = LstZone.Where(r => r.Id == secOfDv.Zone).FirstOrDefault();
                                                                            if (zoneOfDv != default)
                                                                            {
                                                                                var areaOfDv = LstArea.Where(r => r.Id == zoneOfDv.Area).FirstOrDefault();
                                                                                if (areaOfDv != default)
                                                                                {
                                                                                    resultSubText = areaOfDv.Name + " > " + zoneOfDv.Name + " > " + secOfDv.Name;
                                                                                }
                                                                            }
                                                                        }
                                                                        <option data-subtext="@resultSubText" value="@_dv.Id">@_dv.Id - @_dv.Name</option>
                                                                    }
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-2">
                                                        <div class="info-box">
                                                            <span class="info-box-icon bg-success">
                                                                <i class="@GetCompareSign(crEditScene.Expressions.ElementAtOrDefault(idx).Comparison)"></i>
                                                            </span>
                                                            <div class="info-box-content">
                                                                <select title="-- Change --"
                                                                        id="slEditCondOperator-@idx"
                                                                        data-style="btn-light btn-sm"
                                                                        class="form-control selectpicker"
                                                                        @onchange=@(async()=>
                                                                                    {
                                                                                       var _tmpKey =  await SelectAndBindSingle();
                                                                        crEditScene.Expressions.ElementAtOrDefault(idx).Comparison = (MasterDataModel.CompareOperators)_tmpKey;
                                                                    })>
                                                                    @foreach (var obj in Enum.GetValues(typeof(MasterDataModel.CompareOperators)))
                                                                    {
                                                                        var value = Enum.GetName(typeof(MasterDataModel.CompareOperators), obj);
                                                                        var key = (int)obj;
                                                                        <option value="@key">@value</option>
                                                                    }
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>


                                                    <div class="col-3">
                                                        <div class="info-box">
                                                            <div class="info-box-content">
                                                                <select title="-- Change Attribute --"
                                                                        id="slEditCondDeviceAttr-@idx"
                                                                        data-style="btn-light btn-sm"
                                                                        class="form-control selectpicker mb-2"
                                                                        data-live-search="true"
                                                                        @onchange=@(async()=>
                                                                                    {
                                                                                        var _tmpKey = await SelectAndBindSingleTextReturn();
                                                                                        crEditScene.Expressions.ElementAtOrDefault(idx).Attribute = _tmpKey;
                                                                                    })>
                                                                    @{
                                                                        var _dictDvAttr = LstDevice.Where(r => r.Id == _express.DeviceId).FirstOrDefault()?.Status;
                                                                        if (_dictDvAttr != default)
                                                                        {
                                                                            foreach (var DvAttr in _dictDvAttr)
                                                                            {
                                                                                <option value="@DvAttr.Key">@DvAttr.Key</option>
                                                                            }
                                                                        }
                                                                    }
                                                                </select>

                                                                @{
                                                                    var _DetailOfAttr = LstAttribute.Where(r => r.Name == crEditScene.Expressions.ElementAtOrDefault(idx).Attribute).FirstOrDefault();
                                                                    if (_DetailOfAttr != default)
                                                                    {
                                                                        if (_DetailOfAttr.ValueType == SERVER_TYPES.Enum || _DetailOfAttr.ValueType == SERVER_TYPES.Array)
                                                                        {
                                                                            <select class="form-control"
                                                                                    id=@("slEditCondDeviceAttr" + _DetailOfAttr.Name + "-" + idx)
                                                                                    @onchange=@(async () =>
                                                                                            {
                                                                                                var _tmpKey = await jQuerySelectAndBindSingleTextReturn();
                                                                                               crEditScene.Expressions.ElementAtOrDefault(idx).CompareValue = _tmpKey;
                                                                                            })>

                                                                                @foreach (var _valRange in _DetailOfAttr.ValueRange)
                                                                                {
                                                                                    <option value="@_valRange">
                                                                                        @_valRange
                                                                                    </option>
                                                                                }
                                                                            </select>
                                                                        }
                                                                        else if (_DetailOfAttr.ValueType == SERVER_TYPES.Double)
                                                                        {
                                                                            <input class="form-control"
                                                                                   type="number"
                                                                                   @bind-value="@crEditScene.Expressions.ElementAtOrDefault(idx).CompareValue"
                                                                                   required
                                                                                   step="0.01"
                                                                                   min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                   max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                        }
                                                                        else if (_DetailOfAttr.ValueType == SERVER_TYPES.String)
                                                                        {
                                                                            <input class="form-control"
                                                                                   type="text"
                                                                                   required
                                                                                   @bind-value="@crEditScene.Expressions.ElementAtOrDefault(idx).CompareValue" />
                                                                        }
                                                                        else if (_DetailOfAttr.ValueType == SERVER_TYPES.Integer)
                                                                        {
                                                                            <input class="form-control"
                                                                                   type="number"
                                                                                   @bind-value="@crEditScene.Expressions.ElementAtOrDefault(idx).CompareValue"
                                                                                   step="1"
                                                                                   required
                                                                                   min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                   max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                        }
                                                                    }
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>


                                                    <div class="col-3">
                                                        <div class="info-box">
                                                            <span class="info-box-icon bg-success">
                                                                <i class="fas fa-stopwatch"></i>
                                                            </span>
                                                            <div class="info-box-content">
                                                                <div class="input-group input-group-sm">
                                                                    <input type="number"
                                                                           class="form-control"
                                                                           min="0"
                                                                           step="1"
                                                                           placeholder="Interval Time"
                                                                           required
                                                                           @bind-value="crEditScene.Expressions.ElementAtOrDefault(idx).Interval">
                                                                    <div class="input-group-append">
                                                                        <span class="input-group-text">
                                                                            sec
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }

                                        <div class="btn-group" role="group">
                                            <button type="button"
                                                    class="btn btn-primary"
                                                    @onclick=@(()=>
                                                               {
                                                                   crEditScene.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = true, Logic= LogicExpression.None});
                                                               })>
                                                <i class="fas fa-plus"></i>
                                                Command
                                            </button>
                                            <button type="button"
                                                    class="btn btn-info"
                                                    @onclick=@(()=>
                                                                   {
                                                                       crEditScene.Expressions.Add(new ScenesExpressionModel() { IsLogicExpression = false, Comparison= MasterDataModel.CompareOperators.Equal });
                                                                   })>
                                                <i class="fas fa-plus"></i>
                                                Trigger Block
                                            </button>
                                        </div>
                                    </div>
                                </fieldset>

                                <fieldset class="border p-2">
                                    <legend class="w-auto">
                                        <h2 class="font-weight-bolder font-italic">THEN</h2>
                                    </legend>

                                    <div class="row">
                                        <button class="btn btn-success m-3 btn-block"
                                                type="button"
                                                @onclick=@(() =>
                                                           {
                                                               crEditScene.Actions.Add(new RunningActionModel());
                                                               RefilterDvList(crEditScene);
                                                           })>
                                            <i class="fas fa-plus-circle"></i>
                                            ADD ACTIONS
                                        </button>
                                    </div>

                                    @{
                                        // new idea : combine 2 type action list and edit direct in crEditScene >> re fetch list scene item when close modal
                                        // This is List Action fetch from server
                                        // This is List Action create by user and ready to update to DB
                                        foreach (var _card in crEditScene.Actions)
                                        {
                                            <div class="callout callout-warning"
                                                 id="cardEdit-@_card.DeviceList.ElementAtOrDefault(0)">
                                                <div class="mb-4 d-flex">
                                                    <h4 class="mr-auto">
                                                        <span class="badge badge-pill badge-primary">EDIT</span> action
                                                    </h4>

                                                    <button class="btn btn-outline-danger"
                                                            type="button"
                                                            @onclick=@(() =>
                                                                   {
                                                                       crEditScene.Actions.Remove(_card);
                                                                       RefilterDvList(crEditScene);
                                                                   })>
                                                        <i class="far fa-trash-alt"></i>
                                                    </button>
                                                </div>

                                                <div class="row">
                                                    @{
                                                        var _dvType = "AC";
                                                        //_dvType = @LstDevice.Where(r => r.Id == _card?.LstDeviceId.FirstOrDefault()).FirstOrDefault()?.DeviceType;
                                                    }

                                                    <div class="form-group col-5">
                                                        <label>
                                                            Target AC
                                                        </label>
                                                        <div class="input-group ">
                                                            <select class="selectpicker form-control"
                                                                    title="-- Change --"
                                                                    id="slNewTriggerDv-@_card.ActionId"
                                                                    data-style="btn-primary"
                                                                    data-live-search="true"
                                                                    multiple
                                                                    @onchange=@(async () =>
                                                                            {
                                                                                SelectAndBindMultiTargetDevice(_card);
                                                                            })>
                                                                @foreach (var _dv in LstDevice.Where(r => r.DeviceType == "AC"))
                                                                {
                                                                    var resultSubText = "";
                                                                    var secOfDv = LstSection.Where(r => r.Id == _dv.SectionId).FirstOrDefault();
                                                                    if (secOfDv != default)
                                                                    {
                                                                        var zoneOfDv = LstZone.Where(r => r.Id == secOfDv.Zone).FirstOrDefault();
                                                                        if (zoneOfDv != default)
                                                                        {
                                                                            var areaOfDv = LstArea.Where(r => r.Id == zoneOfDv.Area).FirstOrDefault();
                                                                            if (areaOfDv != default)
                                                                            {
                                                                                resultSubText = areaOfDv.Name + " > " + zoneOfDv.Name + " > " + secOfDv.Name;
                                                                            }
                                                                        }
                                                                    }
                                                                    <option data-subtext="@resultSubText" value="@_dv.Id">[@_dv.Capabilitie] @_dv.Id - @_dv.Name</option>
                                                                }
                                                            </select>
                                                        </div>

                                                        <label>
                                                            Attributes
                                                        </label>
                                                        <div class="input-group">
                                                            <select title="-- Select Attributes --"
                                                                    data-style="btn-primary"
                                                                    class="form-control selectpicker"
                                                                    multiple
                                                                    data-actions-box="true"
                                                                    data-live-search="true"
                                                                    @onchange=@(async()=>
                                                                            {
                                                                                await SelectAndBindMultiAttr(_card.SetValues);
                                                                            })>
                                                                @{
                                                                    if (_dvType != String.Empty && _dvType != "" && _dvType != null)
                                                                    {
                                                                        var _lstAttrOfDvType = LstDeviceType.Where(r => r.Name == _dvType).FirstOrDefault().Attributes;
                                                                        foreach (var _attr in _lstAttrOfDvType)
                                                                        {
                                                                            <option value="@_attr">@_attr</option>
                                                                        }
                                                                    }
                                                                }
                                                            </select>
                                                        </div>
                                                    </div>

                                                    <div class="col-7">
                                                        <div class="callout callout-primary">
                                                            <div class="d-flex">
                                                                <div class=" flex-grow-1">
                                                                    <ul>
                                                                        @foreach (var dv in _card.DeviceList)
                                                                        {
                                                                            var objDv = LstDevice.Where(r => r.Id == dv).FirstOrDefault();
                                                                            <li>
                                                                                <span class="badge badge-pill badge-primary">
                                                                                    @objDv.Id
                                                                                </span>
                                                                                - [@objDv.Capabilitie] @objDv.Name
                                                                            </li>
                                                                        }
                                                                    </ul>
                                                                </div>
                                                            </div>

                                                            <div class="col-12">
                                                                <hr class="dotted">
                                                            </div>

                                                            <div class="row">
                                                                @{
                                                                    foreach (var _attr in _card?.SetValues)
                                                                    {
                                                                        var _DetailOfAttr = LstAttribute.Where(r => r.Name == _attr.Key).FirstOrDefault();
                                                                        <div class="form-group col-4">
                                                                            <label>
                                                                                @_attr.Key
                                                                            </label>
                                                                            <div class="input-group ">
                                                                                @if (_DetailOfAttr.ValueType == SERVER_TYPES.Enum || _DetailOfAttr.ValueType == SERVER_TYPES.Array)
                                                                                {
                                                                                    <select title="@_attr.Value"
                                                                                            class="form-control selectpicker"
                                                                                            data-style="btn-light"
                                                                                            @onchange=@(async () =>
                                                                                                    {
                                                                                                        var _tmpKeys = await SelectAndBindSingleTextReturn();
                                                                                                        _card.SetValues[_attr.Key] = _tmpKeys;
                                                                                                    })>

                                                                                        @foreach (var _valRange in _DetailOfAttr.ValueRange)
                                                                                        {
                                                                                            <option value="@_valRange">
                                                                                                @_valRange
                                                                                            </option>
                                                                                        }
                                                                                    </select>
                                                                                }
                                                                                else if (_DetailOfAttr.ValueType == SERVER_TYPES.Double)
                                                                                {
                                                                                    <input class="form-control"
                                                                                           type="number"
                                                                                           @bind-value="@_card.SetValues[_attr.Key]"
                                                                                           required
                                                                                           step="0.01"
                                                                                           min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                           max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                                }
                                                                                else if (_DetailOfAttr.ValueType == SERVER_TYPES.String)
                                                                                {
                                                                                    <input class="form-control"
                                                                                           type="text"
                                                                                           required
                                                                                           @bind-value="@_card.SetValues[_attr.Key]" />
                                                                                }
                                                                                else if (_DetailOfAttr.ValueType == SERVER_TYPES.Integer)
                                                                                {
                                                                                    <input class="form-control"
                                                                                           type="number"
                                                                                           @bind-value="@_card.SetValues[_attr.Key]"
                                                                                           step="1"
                                                                                           required
                                                                                           min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                           max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                                }
                                                                            </div>
                                                                        </div>
                                                                    }
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                </fieldset>

                                @if (CurrentUser.Roles.Contains(Role.System))
                                {
                                    <fieldset class="border p-2">
                                        <legend class="w-auto">

                                            <div class="form-group">
                                                <div class="custom-control custom-switch">
                                                    <input type="checkbox"
                                                           id="swEditJsAction"
                                                           @bind-value="crEditScene.IsJavaScriptType"
                                                           checked="@(crEditScene.IsJavaScriptType?true:false)"
                                                           class="custom-control-input">
                                                    <label class="custom-control-label"
                                                           for="swEditJsAction">
                                                        Custom JavaScript Actions
                                                    </label>
                                                </div>
                                            </div>
                                        </legend>

                                        @if (crEditScene.IsJavaScriptType)
                                        {
                                            <div class="form-group row">
                                                <label class="col-sm-2 col-form-label">
                                                    <i class="fas fa-user-edit"></i>
                                                    Custom JavaScript
                                                </label>
                                                <div class="col-sm-10">
                                                    <textarea class="summernote"
                                                              required=@(crEditScene.IsJavaScriptType ? true : false)
                                                              id="tbEditJsAction"></textarea>
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <label class="col-sm-2 col-form-label"></label>
                                                <div class="col-sm-10">
                                                    <div class="d-flex justify-content-center">
                                                        <div class="btn-group btn-group-sm" role="group">
                                                            <button type="button" class="btn btn-primary">
                                                                Run
                                                            </button>

                                                            <button type="button" class="btn btn-danger">
                                                                Stop
                                                            </button>

                                                            <button type="button" class="btn btn-primary">
                                                                Reload Data
                                                            </button>

                                                            <button type="button" class="btn btn-primary">
                                                                Save
                                                            </button>

                                                            <button type="button" class="btn btn-primary">
                                                                Close
                                                            </button>

                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <label class="col-sm-2 col-form-label"></label>
                                                <div class="col-sm-10">
                                                    <textarea class="summernote"
                                                              required=@(crEditScene.IsJavaScriptType ? true : false)
                                                              id="tbEditJsDebug">
                                        </textarea>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-warning" role="alert">
                                                Javascript Action is not in used
                                            </div>
                                        }
                                    </fieldset>
                                }


                            </form>
                        </div>

                        <div class="modal-footer d-flex justify-content-center">
                            <button type="button" class="btn btn-outline-secondary"
                                    data-dismiss="modal"
                                    @onclick=@(() => { FormEditClose(); })>
                                CANCLE
                            </button>
                            <button type="button"
                                    class="btn btn-danger"
                                    @onclick=@(() => { DeleteItemHandle(crEditScene); })>
                                DELETE SCENE
                            </button>
                            <button type="button"
                                    class="btn btn-primary"
                                    @onclick=@(() => { FormEditSubmitScene(); })>
                                UPDATE SCENE
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            @{
                if (flagForceSelectInject)
                {
                    InjectSelectAfterModal(true);
                    //Console.WriteLine("Inline Code");
                }
            }

        </div><!-- /.container-fluid -->
    </section>
    <!-- /.content -->
</div>

@code {
    bool flagForceSelectInject = false;

    CloudUser CurrentUser = new CloudUser() { Infor = new UserInfor(), Roles = new List<Role>() };
    List<DeviceModel> crFilterTargetDevice = new List<DeviceModel>();
    GlobalSceneModel crEditScene = new GlobalSceneModel();
    GlobalSceneModel NewSceneParams = new GlobalSceneModel();
    List<GlobalSceneModel> LstScene = new List<GlobalSceneModel>();
    List<GlobalSceneModel> LstAllSceneWithGrSetVal = new List<GlobalSceneModel>();
    List<DeviceModel> LstDevice = new List<DeviceModel>();
    List<AreaModel> LstArea = new List<AreaModel>();
    List<ZoneModel> LstZone = new List<ZoneModel>();
    List<SectionModel> LstSection = new List<SectionModel>();
    List<MasterDataModel.DeviceTypeModel> LstDeviceType = new List<MasterDataModel.DeviceTypeModel>();
    List<MasterDataModel.AttributeModel> LstAttribute = new List<MasterDataModel.AttributeModel>();

    ElementReference elFormEditScene, elFormNewScene;
    enum FormAction { NewTargetDevice, EditPlusTargetDevice }

    ScenesService svScene = new ScenesService();
    UserService svUser = new UserService();
    DeviceDataStore svDevice = new DeviceDataStore();
    LayoutAreaSevice svAreaLayout = new LayoutAreaSevice();
    MasterDataService svMasterData = new MasterDataService();
    string AccessToken = "";

    protected override async Task OnInitializedAsync()
    {
        AccessToken = await LocalStorage.GetItemAsync<string>("token");
        if (AccessToken == "")
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Please Sign In Again", false);
            NavHelper.NavigateTo("/login");
        }
        CurrentUser = await svUser.GetUserAllInforAsync(AccessToken);

        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "Initializing Data\nPlease Wait ...");

        RefreshListItem();
        await RefetchData(true);

        // In case navigate from query string
        string querySceneId, queryDeviceId;
        if (NavigationHelper.TryGetQueryString<string>(NavHelper, "sceneId", out querySceneId) && querySceneId != null && NavigationHelper.TryGetQueryString<string>(NavHelper, "deviceId", out queryDeviceId) && queryDeviceId != null)
        {
            var  _objScene = LstScene.Where(r => r.Id == Convert.ToInt32(querySceneId)).FirstOrDefault();

            await JSHelper.InvokeVoidAsync("Interop_ShowHideModal", "mdEditScene", "show");

            // because cardEdit-* id danh dau theo id cua element dau tien nen phai tim ra listDevice roi lay el dau >> jumptourl
            var _firtDvId = _objScene.Actions.Where(r => r.DeviceList.Contains(Convert.ToInt32(queryDeviceId))).FirstOrDefault()?.DeviceList.ElementAtOrDefault(0);
            await JSHelper.InvokeVoidAsync("Interop_GotoUrlAsync", "cardEdit-" + _firtDvId, 2000);

            InvokeAsync(StateHasChanged); // Error SelectBootstrap not load if not change state here
            PreEdit(_objScene);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (flagForceSelectInject)
        {
            InjectSelectAfterModal(false);
        }

        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbEditJsAction", 300, false, false);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbNewJsAction", 300, false, false);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbEditJsDebug", 200, false, false);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbNewJsDebug", 200, false, false);
        JSHelper.InvokeVoidAsync("Interop_PurgeBootstrapSelectCache"); //TODO: Test comment this line
        if (!firstRender)
        {
            return;
        }
        JSHelper.InvokeVoidAsync("Interop_InjectBootstrapSelect");
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbEditJsAction", 300, true, false);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbNewJsAction", 300, true, false);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbEditJsDebug", 200, true, true);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbNewJsDebug", 200, true, true);

        JSHelper.InvokeVoidAsync("Interop_InjectBootstrapTable");
        JSHelper.InvokeVoidAsync("Interop_InjectBootstrapSelect");
    }

    async Task RefilterDvList(GlobalSceneModel _refScene)
    {
        var lstResult = new List<DeviceModel>();
        var lstChosenDv = _refScene.Actions.SelectMany(r => r.DeviceList).ToList();
        crFilterTargetDevice = LstDevice.Where(r => lstChosenDv.Contains(r.Id) == false).ToList();
        InvokeAsync(StateHasChanged);
    }

    async Task RefetchData(bool isNoti)
    {
        if (isNoti) JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "Initializing Data\nPlease Wait ...");

        var taskLstScene = svScene.GetScenesListAsync(AccessToken);
        var taskLstDevice = svDevice.GetOwnerDevicesListAsync(AccessToken);
        var taskLstArea = svAreaLayout.GetAreaListAsync(AccessToken);
        var taskLstZone = svAreaLayout.GetZoneListAsync(AccessToken);
        var taskLstSection = svAreaLayout.GetSectionListAsync(AccessToken);
        var taskLstDeviceType = svMasterData.GetDeviceTypeListAsync(AccessToken);
        var taskLstAttribute = svMasterData.GetAttributeListAsync(AccessToken);

        await Task.WhenAll(taskLstScene, taskLstDevice, taskLstArea, taskLstZone, taskLstSection, taskLstDeviceType, taskLstAttribute);

        LstScene = await taskLstScene;
        LstDevice = await taskLstDevice;
        LstArea = await taskLstArea;
        LstZone = await taskLstZone;
        LstSection = await taskLstSection;
        LstDeviceType = await taskLstDeviceType;
        LstAttribute = await taskLstAttribute;

        if (isNoti) JSHelper.InvokeVoidAsync("Interop_Swal2spinner", false, "");

        InvokeAsync(StateHasChanged);
    }

    async Task RefreshListItem()
    {
        //LstAllSceneWithGrSetVal.Clear();
        //LstScene = await svScene.GetScenesListAsync(AccessToken);
        //foreach (var _scene in LstScene)
        //{
        //    var objScene = _scene.ShallowCopy();
        //    objScene.createActionsByGrSetVal();
        //    LstAllSceneWithGrSetVal.Add(objScene);
        //}
        //InvokeAsync(StateHasChanged);
    }

    string GetCompareSign(MasterDataModel.CompareOperators _operator)
    {
        switch (_operator)
        {
            case MasterDataModel.CompareOperators.Equal:
                return "fas fa-equals";
            case MasterDataModel.CompareOperators.GreaterThan:
                return "fas fa-greater-than";
            case MasterDataModel.CompareOperators.GreaterThanOrEqual:
                return "fas fa-greater-than-equal";
            case MasterDataModel.CompareOperators.LessThan:
                return "fas fa-less-than";
            case MasterDataModel.CompareOperators.LessThanOrEqual:
                return "fas fa-less-than-equal";
            case MasterDataModel.CompareOperators.NotEqual:
                return "fas fa-not-equal";
            default:
                return "";
        }
    }

    async Task ChangeScheduleStateHandle(GlobalSceneModel _item)
    {
        var _objScene = _item.DeepCopy();
        _objScene.Enable = !_objScene.Enable;
        var result = await svScene.UpdateItemAsync(_objScene, AccessToken);
        if (result)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "Scene " + (_objScene.Enable ? "Enabled" : "Disabled"), true);
            RefreshListItem();
        }
        else
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Oops, Something Went Wrong", true);
        }
    }

    async Task DeleteItemHandle(GlobalSceneModel _item)
    {
        var isConfirm = await JSHelper.InvokeAsync<bool>("Interop_Swal2HelperAsync", "warning", "This action cannot be undone", "DELETE THIS SCHEDULE", "#C70039", "Cancel", false);
        if (!isConfirm) return;

        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "");
        var result = await svScene.DeleteItemAsync(_item.Id, AccessToken);
        if (result)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "Schedule Deleted", true);
            JSHelper.InvokeVoidAsync("Interop_ShowHideModal", "mdEditSchedule", "hide");

            JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "Initializing Data\nPlease Wait ...");
            RefreshListItem();
            //LstDevice = await svDevice.GetOwnerDevicesListAsync(AccessToken);
            //LstZone = await svAreaLayout.GetZoneListAsync(AccessToken);
            //LstSection = await svAreaLayout.GetSectionListAsync(AccessToken);
            JSHelper.InvokeVoidAsync("Interop_Swal2spinner", false, "");
            InvokeAsync(StateHasChanged);
        }
        else
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Oops, Something Went Wrong", true);
    }

    //async Task FormNewClose()
    //{
    //    //reset list schedule in case user delete action in modal edit then close modal
    //    RefreshListItem();
    //}

    async Task FormEditClose()
    {
        //reset list sschedule in case user delete action in modal edit then close modal
        RefreshListItem();
    }

    async Task InjectSelectAfterModal(bool nextFlagState)
    {
        flagForceSelectInject = nextFlagState;
    }

    string GenSelectElementId(string firstName, string lastName)
    {
        return firstName + lastName;
    }

    async Task PreEdit(GlobalSceneModel _item)
    {
        crEditScene = _item.DeepCopy();

        flagForceSelectInject = true;

        // Parse some value to correct format
        JSHelper.InvokeVoidAsync("Interop_SummerSetCode", "tbEditJsAction", crEditScene.JavaScriptCode, 350);
        // TODO: fix here
        //var txtDebug = svShedule.GetDebugAsync(crEditScene.Id, AccessToken);
        //JSHelper.InvokeVoidAsync("Interop_SummerSetCode", "tbEditJsDebug", txtDebug, 200);

        await JSHelper.InvokeVoidAsync("Interop_PurgeBootstrapSelectCache");
        JSHelper.InvokeVoidAsync("Interop_PurgeValidBtCache");
        await InvokeAsync(StateHasChanged);
    }

    async Task<string> jQuerySelectAndBindSingleTextReturn()
    {
        var slKeyItem = await JSHelper.InvokeAsync<string>("Interop_jQueryDisplayChange");
        return await Task.FromResult(slKeyItem);
    }

    async Task<string> SelectAndBindSingleTextReturn()
    {
        var _tmpSelectArr = await JSHelper.InvokeAsync<ArrayList>("Interop_DisplayChange");
        var slKeyItem = _tmpSelectArr[0];
        return await Task.FromResult(slKeyItem.ToString());
    }

    async Task<int> SelectAndBindSingle()
    {
        var _tmpSelectArr = await JSHelper.InvokeAsync<ArrayList>("Interop_DisplayChange");
        var slKeyItem = _tmpSelectArr[0];
        return await Task.FromResult(int.Parse(slKeyItem.ToString()));
    }

    private async Task SelectAndBindMultiAttr(Dictionary<string, string> refSetValues)
    {
        var _tmpSelectArr = await JSHelper.InvokeAsync<ArrayList>("Interop_DisplayChange");
        var ParseValue = _tmpSelectArr[0].ToString();
        if (_tmpSelectArr[1] == null) return; // some time random error here so this is fix
        var stateOfValue = bool.Parse(_tmpSelectArr[1].ToString());
        if (stateOfValue)
        {
            if (refSetValues.ContainsKey(ParseValue) == false) refSetValues.Add(ParseValue, null);
        }
        else
        {
            if (refSetValues.ContainsKey(ParseValue) == true) refSetValues.Remove(ParseValue);
        }
        InvokeAsync(StateHasChanged);
    }

    private async void SelectAndBindMultiTargetDevice(RunningActionModel _refAction)
    {
        var _tmpSelectArr = await JSHelper.InvokeAsync<ArrayList>("Interop_DisplayChange");
        var ParseValue = int.Parse(_tmpSelectArr[0].ToString());
        if (_tmpSelectArr[1] == null) return; // some time random error here so this is fix
        var stateOfValue = bool.Parse(_tmpSelectArr[1].ToString());
        // ADD ITEM
        if (stateOfValue)
        {
            if (_refAction.DeviceList.Contains(ParseValue) == false) _refAction.DeviceList.Add(ParseValue);
        }
        // REMOVE ITEM
        else
        {
            if (_refAction.DeviceList.Contains(ParseValue) == true) _refAction.DeviceList.Remove(ParseValue);
        }
        InvokeAsync(StateHasChanged);
    }

    async Task FormNewSubmitScene()
    {
        var isFormValid = await JSHelper.InvokeAsync<bool>("Interop_FormValidate", elFormNewScene);
        if (!isFormValid)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "warning", "Please fill all required field", true);
            return;
        }

        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "");

        // Convert Some Prop to correct format
        if (NewSceneParams.IsJavaScriptType)
        {
            NewSceneParams.JavaScriptCode = await JSHelper.InvokeAsync<string>("Interop_SummerGetCode", "tbNewJsAction");
        }

        var resultDvId = await svScene.InsertItemAsync(NewSceneParams, AccessToken);
        if (resultDvId == false)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Some thing went wrong", false);
            return;
        }
        JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "Device Id <strong>" + resultDvId.ToString() + "</strong> Added", false);
        JSHelper.InvokeVoidAsync("Interop_ShowHideModal", "mdNewScene", "hide");
        RefetchData(false);
    }

    async Task CloneProfileHanlde(GlobalSceneModel _profile)
    {
        var ProfileObj = _profile.DeepCopy();
        var ProfileName = await JSHelper.InvokeAsync<string>("Interop_Swal2InputAsync", "text", "Name your profile", "Clone");
        if (ProfileName == "") return;

        // Convert Some Prop to correct format
        if (ProfileObj.IsJavaScriptType)
        {
            NewSceneParams.JavaScriptCode = await JSHelper.InvokeAsync<string>("Interop_SummerGetCode", "tbNewJsAction");
        }
        ProfileObj.Name = ProfileName;

        var resultDvId = await svScene.InsertItemAsync(ProfileObj, AccessToken);
        if (resultDvId == false)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Some thing went wrong", false);
            return;
        }
        JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "Scene Cloned", true);

        RefetchData(false);
    }

    async Task FormEditSubmitScene()
    {
        var isFormValid = await JSHelper.InvokeAsync<bool>("Interop_FormValidate", elFormEditScene);
        if (!isFormValid)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "warning", "Please fill all required field", true);
            return;
        }
        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "");

        // Convert Some Prop to correct format
        if (crEditScene.IsJavaScriptType)
        {
            crEditScene.JavaScriptCode = await JSHelper.InvokeAsync<string>("Interop_SummerGetCode", "tbEditJsAction");
        }
        var result = await svScene.UpdateItemAsync(crEditScene, AccessToken);
        if (result)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "Schedule Updated", true);
            JSHelper.InvokeVoidAsync("Interop_ShowHideModal", "mdEditSchedule", "hide");

            //LstSchedule = await svShedule.GetItemsAsync(AccessToken); // this is already called in FormEditClose()
            //LstDevice = await svDevice.GetOwnerDevicesListAsync(AccessToken);
            //LstZone = await svAreaLayout.GetZoneListAsync(AccessToken);
            //LstSection = await svAreaLayout.GetSectionListAsync(AccessToken);
            FormEditClose();
            RefetchData(false);
        }
        else
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Oops, Something Went Wrong", true);

        InvokeAsync(StateHasChanged);
    }
}