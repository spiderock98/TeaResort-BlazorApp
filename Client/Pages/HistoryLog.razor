@page "/logs"
@using Share.Models
@using SmartRetail.Client.Services
@using System.Collections
@inject NavigationManager NavHelper
@inject IJSRuntime JSHelper
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using BlazorDateRangePicker
@using Helper

<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col text-center">
                    <h1 style="font-size:50px;">History Logs</h1>
                </div>
            </div><!-- /.row -->
        </div><!-- /.container-fluid -->
    </section>
    <!-- /.content-header -->
    <!-- Main content -->
    <section class="content">
        <div class="container-fluid">


            <div class="card card-info card-outline card-outline-tabs">
                <div class="card-header p-0 border-bottom-0">

                    <div class="row">
                        @*<div class="input-group m-3 col-12 col-lg-6">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">
                                        Device
                                    </span>
                                </div>
                                <DateRangePicker class="form-control"
                                                 OnRangeSelect="DateRangeSubmitHandle" />
                            </div>*@

                        <div class="input-group m-3 col-12">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    Date Range Filter
                                </span>
                            </div>
                            <DateRangePicker class="form-control"
                                             DateFormat="dddd dd/MM/yyyy"
                                             OnRangeSelect="DateRangeSubmitHandle" />
                        </div>
                    </div>

                </div>

                <div class="card-body">

                    <table class="bootstrap-table"
                           data-search="true"
                           data-show-export="true"
                           data-search-align="right"
                           data-buttons-align="right">
                        <thead>
                            <tr>
                                <th class="text-center">No.</th>
                                <th class="text-center">DEVICE</th>
                                <th class="text-center">ATTRIBUTE</th>
                                <th class="text-center">LOG TIME</th>
                                <th class="text-center">OLD VALUE</th>
                                <th class="text-center">NEW VALUE</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int idx = 0;
                                @foreach (var _log in LstDataLog)
                                {
                                    <tr class="text-center">
                                        <th>@(++idx)</th>
                                        <td>
                                            @_log.DeviceId - @LstDevice.Where(r => r.Id == _log.DeviceId).FirstOrDefault()?.Name;
                                        </td>
                                        <td>
                                            @_log.Attribute
                                        </td>
                                        <td>
                                            @(UnixTime.UnixMillisToLocalTimeFormat(Convert.ToInt64(_log.Time)))
                                        </td>
                                        <td>
                                            @_log.OldValue
                                        </td>
                                        <td>
                                            @_log.Value
                                        </td>
                                    </tr>
                                }
                            }

                        </tbody>
                    </table>

                </div>

            </div>


        </div><!-- /.container-fluid -->
    </section>
    <!-- /.content -->
</div>


@code {
    string AccessToken = "";
    DataLogService svDataLog = new DataLogService();
    DeviceDataStore svDevice = new DeviceDataStore();
    List<DataLogModel> LstDataLog = new List<DataLogModel>();
    List<DeviceModel> LstDevice = new List<DeviceModel>();
    //Dictionary<int, string> DicDeviceName;

    protected override async Task OnInitializedAsync()
    {
        AccessToken = await LocalStorage.GetItemAsync<string>("token");
        if (AccessToken == "")
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Please Sign In Again", false);
            NavHelper.NavigateTo("/login");
        }
        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "Initialize Data\nPlease wait ...");
        LstDataLog = await svDataLog.GetAllDataAsync(AccessToken, UnixTime.LocalTimeToUnixSecond(DateTime.Now.Date), UnixTime.LocalTimeToUnixSecond(DateTime.Now.Date.AddDays(-7)));
        if (LstDataLog.Count == 0) {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "warning", "No logs data This Week", false);
        }
        LstDevice = await svDevice.GetOwnerDevicesListAsync(AccessToken);
        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", false, "");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        JSHelper.InvokeVoidAsync("Interop_InjectBootstrapTable");
    }

    async Task DateRangeSubmitHandle(DateRange range)
    {
        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "Loading Data Logs\nPlease wait ...");
        var _tmpStart = range.Start.ToUnixTimeSeconds();
        var _tmpEnd = range.End.ToUnixTimeSeconds();

        LstDataLog = await svDataLog.GetAllDataAsync(AccessToken, Convert.ToInt32(_tmpStart), Convert.ToInt32(_tmpEnd));
        if (LstDataLog.Count == 0)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "warning", "No logs data", false);
        }

        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", false, "");

    }
}