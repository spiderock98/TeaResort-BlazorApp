@page "/logs"
@using Share.Models
@using SmartRetail.Client.Services
@using System.Collections
@inject NavigationManager NavHelper
@inject IJSRuntime JSHelper
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using BlazorDateRangePicker
@using Helper
@using System.Threading.Tasks;
@using Newtonsoft.Json; 


<div class="content-wrapper">
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col text-center">
                    <h1 style="font-size:50px;">History Logs</h1>
                </div>
            </div>
        </div>
    </section>
    <section class="content">
        <div class="container-fluid">

        <button class="btn btn-success"
                @onclick="@(()=> 
                            {
                                InvokeAsync(StateHasChanged);
                            })">
               Refesh Data
        </button>
            <div class="card card-info card-outline card-outline-tabs">
                <div class="card-header p-0 border-bottom-0">

                    <div class="row">
                        <div class="input-group m-3 col-12">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    Date Range Filter
                                </span>
                            </div>
                            <DateRangePicker class="form-control"
                                             DateFormat="dddd dd/MM/yyyy"
                                             OnRangeSelect="DateRangeSubmitHandle" />
                        </div>
                    </div>
                </div>

                <div class="card-body">
                    <div class="table-responsive">
                        <HxGrid @ref="HxTable" TItem="DataLogModel" DataProvider="ClientSideProcessingDataProvider" PageSize="10">
                            <Columns>
                                <HxGridColumn TItem="DataLogModel" HeaderText="DEVICE" ItemTextSelector="@(item => item.DeviceId.ToString() + item.DeviceName)" SortKeySelector="@(item => item.DeviceId)" IsDefaultSortColumn="true" />
                                <HxGridColumn TItem="DataLogModel" HeaderText="ATTRIBUTE" ItemTextSelector="@(item => item.Attribute)" SortKeySelector="@(item => item.Attribute)" />
                                <HxGridColumn TItem="DataLogModel" HeaderText="LOG TIME" ItemTextSelector="@(item => (UnixTime.UnixMillisToLocalTimeFormat(Convert.ToInt64(item.Time))))" SortKeySelector="@(item => item.Time)" />
                                <HxGridColumn TItem="DataLogModel" HeaderText="OLD VALUE" ItemTextSelector="@(item => item.OldValue)" SortKeySelector="@(item => item.OldValue)" />
                                <HxGridColumn TItem="DataLogModel" HeaderText="NEW VALUE" ItemTextSelector="@(item => item.Value)" SortKeySelector="@(item => item.Value)" />
                            </Columns>
                        </HxGrid>
                    </div>
                    
                </div>
            </div>
        </div>
    </section>
</div>

@code {
    string AccessToken = "";
    DataLogService svDataLog = new DataLogService();
    DeviceDataStore svDevice = new DeviceDataStore();
    List<DataLogModel> LstDataLog = new List<DataLogModel>();
    List<DeviceModel> LstDevice = new List<DeviceModel>();
    //Dictionary<int, string> DicDeviceName;
    private HxGrid<DataLogModel> HxTable;

    protected override async Task OnInitializedAsync()
    {
        AccessToken = await LocalStorage.GetItemAsync<string>("token");
        if (AccessToken == "")
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Please Sign In Again", false);
            NavHelper.NavigateTo("/login");
        }
        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "Initialize Data\nPlease wait ...");
        LstDataLog = await svDataLog.GetAllDataAsync(AccessToken, UnixTime.LocalTimeToUnixSecond(DateTime.Now.Date), UnixTime.LocalTimeToUnixSecond(DateTime.Now.Date.AddDays(-7)));
        HxTable.RefreshDataAsync();

        if (LstDataLog.Count == 0)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "warning", "No logs data This Week", false);
        }
        LstDevice = await svDevice.GetOwnerDevicesListAsync(AccessToken);
        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", false, "");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        JSHelper.InvokeVoidAsync("Interop_InjectBootstrapTable");
    }

    private Task<GridDataProviderResult<DataLogModel>> ClientSideProcessingDataProvider(GridDataProviderRequest<DataLogModel> request)
    {
        return Task.FromResult(request.ApplyTo(LstDataLog));
    }

    async Task DateRangeSubmitHandle(DateRange range)
    {
        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "Loading Data Logs\nPlease wait ...");
        var _tmpStart = range.Start.ToUnixTimeSeconds();
        var _tmpEnd = range.End.ToUnixTimeSeconds();

        LstDataLog = await svDataLog.GetAllDataAsync(AccessToken, Convert.ToInt32(_tmpStart), Convert.ToInt32(_tmpEnd));
        if (LstDataLog.Count == 0)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "warning", "No logs data", false);
        }

        HxTable.RefreshDataAsync();
        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", false, "");
    }
}