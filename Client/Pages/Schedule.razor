@page "/schedule"
@inject NavigationManager uriHelper
@using BlazorDateRangePicker
@using Helper
@inject IJSRuntime JSHelper
@using SmartRetail.Shared
@using SmartRetail.Client.Services
@using Share.Models
@using System.Collections
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavHelper
@using System
@using Newtonsoft.Json 


<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col text-center">
                    <h1 style="font-size:50px;">Schedule Profiles</h1>
                </div>
            </div><!-- /.row -->
        </div><!-- /.container-fluid -->
    </section>
    <!-- /.content-header -->
    <!-- Main content -->
    <section class="content">
        <div class="container-fluid">

            <div class="card card-primary">
                <div class="card-body">
                    <button class="btn btn-success m-2"
                            type="button"
                            data-toggle="modal"
                            data-target="#mdNewSchedule"
                            @onclick=@(()=>
                                       {
                                           NewScheduleParams = new GlobalScheduleModel();
                                           InvokeAsync(StateHasChanged);
                                       })>
                        Add New Schedule
                    </button>
                    <table class="bootstrap-table"
                           data-search="true"
                           data-show-export="true"
                           data-search-align="right"
                           data-buttons-align="right"
                           data-pagination="true"
                           data-height="700">
                        <thead>
                            <tr class="text-center">
                                <th>No.</th>
                                <th>NAME</th>
                                <th>TYPE</th>
                                <th>TIME</th>
                                <th>ENABLE</th>
                                <th>LAST RUN</th>
                                <th>CONTROL</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                foreach (var profile in LstSchedule.OrderByDescending(r => r.Id))
                                {

                                    <tr class="text-center">
                                        <th>@profile.Id</th>
                                        <td>@profile.Name</td>
                                        @{
                                            var enumValue = (GlobalScheduleModel.ScheduleTypeEnum)profile.ScheduleType;
                                            <td>@enumValue.ToString()</td>
                                        }
                                        <td>@UnixTime.UnixSecondToLocalTime(profile.Time)</td>
                                        @{ if (profile.Enable)
                                            {
                                                <td>
                                                    <span class="badge badge-pill badge-success">Enable</span>

                                                </td>
                                            }
                                            else
                                            {
                                                <td>
                                                    <span class="badge badge-pill badge-danger">Disable</span>

                                                </td>
                                            }
                                        }
                                        <td>@UnixTime.UnixMillisToLocalTimeFormat(profile.LastRunTime)</td>
                                        <td>
                                            <div class="d-flex flex-wrap">
                                                <button class="btn btn-xs btn-primary m-1"
                                                        type="button"
                                                        data-toggle="modal"
                                                        data-target="#mdEditSchedule"
                                                        @onclick=@(() => { PreEdit(profile); })>
                                                    <i class="fas fa-edit"></i>
                                                </button>

                                                <button class="btn btn-xs btn-danger m-1"
                                                        @onclick=@(() => { DeleteItemHandle(profile); })>
                                                    <i class="fas fa-trash-alt"></i>
                                                </button>

                                                @{
                                                    string attrBtnEnable = profile.Enable ? "light" : "success";
                                                    var titleTooltip = profile.Enable ? "Disable Schedule" : "Enable Schedule";
                                                }
                                                <button data-toggle="tooltip"
                                                        data-placement="top"
                                                        title="@titleTooltip" class="btn btn-xs btn-@attrBtnEnable m-1"
                                                        @onclick=@(() => { ChangeScheduleStateHandle(profile); })>
                                                    <i class="fas fa-power-off"></i>
                                                </button>

                                                @*<div class="form-group">
                                                        <div class="custom-control custom-switch custom-switch-off-danger custom-switch-on-success">
                                                            <input type="checkbox"
                                                                   class="custom-control-input"
                                                                   checked="@(isAnyDvACPowerOFF ? false : true)"
                                                                   id="swACPowerZone-@_zone.Id"
                                                                   @onchange=@((e)=> { toggleACPowerGroupHandle(bool.Parse(e.Value.ToString()), _lstDeviceInZone, "swACPowerZone-" + _zone.Id); })>
                                                            <label class="custom-control-label" for="swACPowerZone-@_zone.Id"></label>
                                                        </div>
                                                    </div>*@

                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>

                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->
            <!-- Modal New Schedule -->
            <div class="modal animate__animated animate__bounceInUp" data-backdrop="static" data-keyboard="false" id="mdNewSchedule" tabindex="-1">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header bg-info text-white d-flex justify-content-center flex-column text-center">
                            <h1 class="modal-title w-100">
                                <i class="fas fa-plus-circle"></i>
                            </h1>
                            <h2 class="modal-title w-100">
                                New Schedule Profile
                            </h2>
                        </div>

                        <div class="modal-body">
                            <form @ref="elFormNewSchedule"
                                  class="needs-validation"
                                  id="formNewWorker"
                                  novalidate>

                                <fieldset class="border p-2">
                                    <legend class="w-auto">Time Settings</legend>

                                    <div class="form-group row">
                                        <label class="col-sm-2 col-form-label">
                                            <i class="fas fa-info-circle"></i>
                                            Schedule Name
                                        </label>
                                        <div class="col-sm-10">
                                            <input @bind-value="NewScheduleParams.Name"
                                                   type="text"
                                                   class="form-control"
                                                   placeholder="-- Name of new Schedule --"
                                                   required />
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        <label class="col-sm-2 col-form-label">
                                            <i class="fab fa-slack-hash"></i>
                                            Schedule Type
                                        </label>
                                        <div class="col-sm-10">
                                            <select @onchange=@(async () => { var _tmpKey = await SelectAndBindSingle(); NewScheduleParams.ScheduleType = (GlobalScheduleModel.ScheduleTypeEnum)_tmpKey; })
                                                    id="slNewScheduleType"
                                                    title="-- Select --"
                                                    data-style="btn-light"
                                                    class="form-control selectpicker"
                                                    required>
                                                @foreach (var obj in Enum.GetValues(typeof(GlobalScheduleModel.ScheduleTypeEnum)))
                                                {
                                                    var value = Enum.GetName(typeof(GlobalScheduleModel.ScheduleTypeEnum), obj);
                                                    var key = (int)obj;
                                                    <option value="@key">@value</option>
                                                }
                                            </select>
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        <label class="col-sm-2 col-form-label">
                                            <i class="fas fa-clock"></i>
                                            @(NewScheduleParams.ScheduleType == GlobalScheduleModel.ScheduleTypeEnum.IntervalTime ? "Occurred Every" : "Occurred In Time")
                                        </label>
                                        <div class="col-sm-10">
                                            @if (NewScheduleParams.ScheduleType == GlobalScheduleModel.ScheduleTypeEnum.IntervalTime)
                                            {
                                                <input type="number"
                                                       min="0"
                                                       step="1"
                                                       placeholder="-- milliseconds --"
                                                       class="form-control"
                                                       @bind-value="NewScheduleParams.Time"
                                                       required />
                                            }
                                            else
                                            {
                                                <DateRangePicker class="form-control"
                                                                 SingleDatePicker="true"
                                                                 TimePicker="true"
                                                                 TimePicker24Hour="true"
                                                                 DateFormat="dddd dd/MM/yyyy - hh:mm tt"
                                                                 @bind-StartDate="crDatetimeBinding"
                                                                 required />
                                            }
                                        </div>
                                    </div>

                                    @if (NewScheduleParams.ScheduleType == GlobalScheduleModel.ScheduleTypeEnum.Daily)
                                    {
                                        <div class="form-group row">
                                            <label class="col-sm-2 col-form-label">
                                                <i class="fas fa-redo"></i>
                                                Repeats
                                            </label>
                                            <div class="col-sm-10">
                                                <select @onchange=@(() => { SelectAndBindMulti(FormAction.AddRepeatDay); })
                                                        title="-- Select --"
                                                        data-style="btn-light"
                                                        class="form-control selectpicker"
                                                        multiple>
                                                    @foreach (var obj in Enum.GetValues(typeof(DayOfWeek)))
                                                    {
                                                        var value = Enum.GetName(typeof(DayOfWeek), obj);
                                                        var key = (int)obj;
                                                        <option value="@key">@value</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }

                                </fieldset>

                                <fieldset class="border p-2">
                                    <legend class="w-auto">Attribute Settings</legend>

                                    <div class="row">
                                        <button class="btn btn-sm btn-success m-3 btn-block"
                                                type="button"
                                                @onclick=@(() => { NewScheduleParams.Actions.Add(new RunningActionModel()); })>
                                            <i class="fas fa-plus-circle"></i>
                                            ADD NEW ACTIONS
                                        </button>
                                    </div>


                                    @foreach (var cardNew in NewScheduleParams.Actions)
                                    {
                                        int idx = NewScheduleParams.Actions.IndexOf(cardNew);

                                        <div class="callout callout-primary">
                                            <div class="mb-4 d-flex">
                                                <h4 class="mr-auto">
                                                    <span class="badge badge-pill badge-primary">NEW</span>
                                                </h4>

                                                <button class="btn btn-outline-danger"
                                                        type="button"
                                                        @onclick=@(() => { NewScheduleParams.Actions.Remove(cardNew); })>
                                                    <i class="far fa-trash-alt"></i>
                                                </button>
                                            </div>

                                            <div class="row">

                                                <div class="form-group col-5">
                                                    <label>
                                                        Target Devices
                                                    </label>
                                                    <div class="input-group ">
                                                        <select class="selectpicker form-control"
                                                                title="-- Select --"
                                                                id="slNewTargetDv-@cardNew.ActionId"
                                                                data-style="btn-primary"
                                                                data-live-search="true"
                                                                multiple
                                                                required
                                                                @onchange=@(async () =>
                                                                            {
                                                                                SelectAndBindMultiTargetDevice(cardNew);
                                                                            })>
                                                            @foreach (var _dv in LstDevice)
                                                            {
                                                                <option value="@_dv.Id">[@_dv.Capabilitie] @_dv.Name</option>
                                                            }
                                                        </select>
                                                    </div>
                                                </div>

                                                @{
                                                    var _dvType = "AC";
                                                    //_dvType = @LstDevice.Where(r => r.Id == cardNew.ActionObj.DeviceId).FirstOrDefault()?.DeviceType;
                                                }
                                                <div class="col-7">
                                                    <div class="callout callout-primary">
                                                        <div class="d-flex">
                                                            <div class=" flex-grow-1">
                                                                <ul style="list-style-type: none;">
                                                                    @foreach (var dv in cardNew.DeviceList)
                                                                    {
                                                                        var objDv = LstDevice.Where(r => r.Id == dv).FirstOrDefault();
                                                                        <li>
                                                                            <span class="badge badge-pill badge-primary">
                                                                                @objDv.Id
                                                                            </span>
                                                                            - [@objDv.Capabilitie] @objDv.Name
                                                                        </li>
                                                                    }
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="col-12">
                                                    <hr class="dotted">
                                                </div>


                                                <div class="card col-12">
                                                    <div class="card-header">
                                                        <select title="-- Select Attributes --"
                                                                data-style="btn-primary"
                                                                class="form-control selectpicker"
                                                                multiple
                                                                data-actions-box="true"
                                                                data-live-search="true"
                                                                id="slNewDeviceAttribute-@cardNew.ActionId"
                                                                @onchange=@(async()=> { await SelectAndBindMultiActionList(cardNew.SetValues);  })>
                                                            @{
                                                                if (_dvType != String.Empty && _dvType != "" && _dvType != null)
                                                                {
                                                                    var _lstAttrOfDvType = LstDeviceType.Where(r => r.Name == _dvType).FirstOrDefault().Attributes;
                                                                    foreach (var _attr in _lstAttrOfDvType)
                                                                    {
                                                                        <option value="@_attr">@_attr</option>
                                                                    }
                                                                }
                                                            }
                                                        </select>
                                                    </div>
                                                    <div class="card-body">
                                                        <div class="row">

                                                            @{
                                                                foreach (var _attr in cardNew.SetValues)
                                                                {
                                                                    var _DetailOfAttr = LstAttribute.Where(r => r.Name == _attr.Key).FirstOrDefault();
                                                                    <div class="form-group col-4">
                                                                        <label>
                                                                            @_attr.Key
                                                                        </label>
                                                                        <div class="input-group ">
                                                                            @if (_DetailOfAttr.ValueType == SERVER_TYPES.Enum || _DetailOfAttr.ValueType == SERVER_TYPES.Array)
                                                                            {
                                                                                <select title="-- Select --"
                                                                                        class="form-control selectpicker"
                                                                                        data-style="btn-light"
                                                                                        required
                                                                                        id=@("slNew" + _attr.Key+ "-" + cardNew.ActionId)
                                                                                        @onchange=@(async () => { var _tmpKeys = await SelectAndBindSingleTextReturn(); cardNew.SetValues[_attr.Key] = _tmpKeys; })>

                                                                                    @foreach (var _valRange in _DetailOfAttr.ValueRange)
                                                                                    {
                                                                                        <option value="@_valRange">
                                                                                            @_valRange
                                                                                        </option>
                                                                                    }
                                                                                </select>
                                                                            }
                                                                            else if (_DetailOfAttr.ValueType == SERVER_TYPES.Double)
                                                                            {
                                                                                <input class="form-control"
                                                                                       type="number"
                                                                                       @bind-value="@cardNew.SetValues[_attr.Key]"
                                                                                       required
                                                                                       step="0.01"
                                                                                       min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                       max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                            }
                                                                            else if (_DetailOfAttr.ValueType == SERVER_TYPES.String)
                                                                            {
                                                                                <input class="form-control"
                                                                                       type="text"
                                                                                       @bind-value="@cardNew.SetValues[_attr.Key]" />
                                                                            }
                                                                            else if (_DetailOfAttr.ValueType == SERVER_TYPES.Integer)
                                                                            {
                                                                                <input class="form-control"
                                                                                       type="number"
                                                                                       @bind-value="@cardNew.SetValues[_attr.Key]"
                                                                                       step="1"
                                                                                       required
                                                                                       min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                       max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                }
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                    }

                                </fieldset>

                                @if (CurrentUser.Roles.Contains(Role.System))
                                {
                                    <fieldset class="border p-2">
                                        <legend class="w-auto">
                                            @*<input type="checkbox"
                                                       class="custom-control-input"
                                                        />
                                                <label class="custom-control-label">Custom JavaScript Actions</label>*@

                                            <div class="form-group">
                                                <div class="custom-control custom-switch">
                                                    <input type="checkbox"
                                                           id="swNewJsAction"
                                                           @bind-value="NewScheduleParams.IsJavaScriptAction"
                                                           class="custom-control-input">
                                                    <label class="custom-control-label"
                                                           for="swNewJsAction">
                                                        Custom JavaScript Actions
                                                    </label>
                                                </div>
                                            </div>

                                        </legend>

                                        @if (NewScheduleParams.IsJavaScriptAction)
                                        {
                                            <div class="form-group row">
                                                <label class="col-sm-2 col-form-label">
                                                    <i class="fas fa-user-edit"></i>
                                                    Custom JavaScript
                                                </label>
                                                <div class="col-sm-10">
                                                    <textarea class="summernote"
                                                              required=@(NewScheduleParams.IsJavaScriptAction ? true : false)
                                                              id="tbNewJsAction"></textarea>
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <label class="col-sm-2 col-form-label"></label>
                                                <div class="col-sm-10">
                                                    <div class="d-flex justify-content-center">
                                                        <div class="btn-group btn-group-sm" role="group">
                                                            <button type="button" class="btn btn-primary">
                                                                Run
                                                            </button>

                                                            <button type="button" class="btn btn-danger">
                                                                Stop
                                                            </button>

                                                            <button type="button" class="btn btn-primary">
                                                                Reload Data
                                                            </button>

                                                            <button type="button" class="btn btn-primary">
                                                                Save
                                                            </button>

                                                            <button type="button" class="btn btn-primary">
                                                                Close
                                                            </button>

                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <label class="col-sm-2 col-form-label"></label>
                                                <div class="col-sm-10">
                                                    <textarea class="summernote"
                                                              id="tbNewJsDebug"></textarea>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-warning" role="alert">
                                                Javascript Action is not in used
                                            </div>
                                        }

                                    </fieldset>
                                }


                            </form>
                        </div>

                        <div class="modal-footer d-flex justify-content-center">
                            <button type="button" class="btn btn-lg btn-outline-info"
                                    data-dismiss="modal">
                                Close
                            </button>
                            <button type="button"
                                    class="btn btn-lg btn-info"
                                    @onclick=@(() => { FormNewSubmit(); })>
                                Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Modal Edit Schedule -->
            <div class="modal animate__animated animate__bounceInUp" data-backdrop="static" data-keyboard="false" id="mdEditSchedule" tabindex="-1">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header bg-info text-white d-flex justify-content-center flex-column text-center">
                            <h1 class="modal-title w-100">
                                <i class="fas fa-cogs"></i>
                            </h1>
                            <h2 class="modal-title w-100">
                                Edit Schedule
                            </h2>
                        </div>
                        <div class="modal-body">
                            <form @ref="elFormEditSchedule"
                                  class="needs-validation"
                                  id="formEditWorker"
                                  novalidate>

                                <fieldset class="border p-2">
                                    <legend class="w-auto">Time Settings</legend>

                                    <div class="form-group row">
                                        <label class="col-sm-2 col-form-label">
                                            <i class="fas fa-info-circle"></i>
                                            Schedule Name
                                        </label>
                                        <div class="col-sm-10">
                                            <input @bind-value="crEditSchedule.Name"
                                                   type="text"
                                                   class="form-control"
                                                   placeholder="-- Name of Schedule --"
                                                   required />
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        <label class="col-sm-2 col-form-label">
                                            <i class="fab fa-slack-hash"></i>
                                            Schedule Type
                                        </label>
                                        <div class="col-sm-10">
                                            <select @onchange=@(async () => { var _tmpKey = await SelectAndBindSingle(); crEditSchedule.ScheduleType = (GlobalScheduleModel.ScheduleTypeEnum)_tmpKey; })
                                                    id="slEditScheduleType"
                                                    title="-- Select --"
                                                    data-style="btn-light"
                                                    class="form-control selectpicker"
                                                    required>
                                                @foreach (var obj in Enum.GetValues(typeof(GlobalScheduleModel.ScheduleTypeEnum)))
                                                {
                                                    var value = Enum.GetName(typeof(GlobalScheduleModel.ScheduleTypeEnum), obj);
                                                    var key = (int)obj;
                                                    <option value="@key">@value</option>
                                                }
                                            </select>
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        <label class="col-sm-2 col-form-label">
                                            <i class="fas fa-clock"></i>
                                            @(crEditSchedule.ScheduleType == GlobalScheduleModel.ScheduleTypeEnum.IntervalTime ? "Occurred Every" : "Occurred In Time")
                                        </label>

                                        <div class="col-sm-10">
                                            @if (crEditSchedule.ScheduleType == GlobalScheduleModel.ScheduleTypeEnum.IntervalTime)
                                            {
                                                <input type="number"
                                                       min="0"
                                                       step="1"
                                                       placeholder="-- milliseconds --"
                                                       class="form-control"
                                                       @bind-value="crEditSchedule.Time"
                                                       required />
                                            }
                                            else
                                            {
                                                <DateRangePicker class="form-control"
                                                                 SingleDatePicker="true"
                                                                 TimePicker="true"
                                                                 TimePicker24Hour="true"
                                                                 DateFormat="dddd dd/MM/yyyy - hh:mm tt"
                                                                 @bind-StartDate="crDatetimeBinding"
                                                                 required />
                                            }
                                        </div>
                                    </div>

                                    @if (crEditSchedule.ScheduleType == GlobalScheduleModel.ScheduleTypeEnum.Daily)
                                    {
                                        <div class="form-group row">
                                            <label class="col-sm-2 col-form-label">
                                                <i class="fas fa-redo"></i>
                                                Repeats
                                            </label>
                                            <div class="col-sm-10">
                                                <select title="-- Select --"
                                                        data-style="btn-light"
                                                        class="form-control selectpicker"
                                                        id="slEditRepeat"
                                                        multiple
                                                        @onchange=@(() => { SelectAndBindMulti(FormAction.EditRepeatDay); })>
                                                    @foreach (var obj in Enum.GetValues(typeof(DayOfWeek)))
                                                    {
                                                        var value = Enum.GetName(typeof(DayOfWeek), obj);
                                                        var key = (int)obj;
                                                        <option value="@key">@value</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }

                                </fieldset>

                                <fieldset class="border p-2">
                                    <legend class="w-auto">Attribute Settings</legend>

                                    <div class="row">
                                        <div class="col-6">
                                            <button class="btn btn-primary m-3 btn-block"
                                                    type="button"
                                                    @onclick=@(() => { crEditSchedule.Actions.Add(new RunningActionModel()); })>
                                                <i class="fas fa-plus-circle"></i>
                                                ADD ACTIONS
                                            </button>
                                        </div>
                                    </div>

                                    @{
                                        // This is List Action create by user and ready to update to DB

                                        // new idea : combine 2 type action list and edit direct in crEditScene >> re fetch list scene item when close modal
                                        // This is List Action fetch from server
                                        // This is List Action create by user and ready to update to DB
                                        foreach (var _action in crEditSchedule.Actions)
                                        {
                                            <div class="callout callout-warning"
                                                 id="cardEdit-@_action.DeviceList.ElementAtOrDefault(0)">
                                                <div class="mb-4 d-flex">
                                                    <h4 class="mr-auto">
                                                        <span class="badge badge-pill badge-warning">NEW</span>
                                                    </h4>

                                                    <button class="btn btn-outline-danger"
                                                            type="button"
                                                            @onclick=@(() => { crEditSchedule.Actions.Remove(_action); })>
                                                        <i class="far fa-trash-alt"></i>
                                                    </button>
                                                </div>

                                                <div class="row">

                                                    <div class="form-group col-4">
                                                        <label>
                                                            Target Devices
                                                        </label>
                                                        <div class="input-group ">
                                                            <select class="selectpicker form-control"
                                                                    title="-- Select --"
                                                                    id="slEditTargetDv-@_action.ActionId"
                                                                    data-style="btn-warning"
                                                                    data-live-search="true"
                                                                    multiple
                                                                    @onchange=@(async () => { SelectAndBindMultiTargetDevice(_action); })>
                                                                @foreach (var _dv in LstDevice)
                                                                {
                                                                    <option value="@_dv.Id">[@_dv.Capabilitie] @_dv.Name</option>
                                                                }
                                                            </select>
                                                        </div>
                                                    </div>

                                                    @{
                                                        var _dvType = "AC";
                                                        //_dvType = @LstDevice.Where(r => r.Id == cardNew.ActionObj.DeviceId).FirstOrDefault()?.DeviceType;
                                                    }
                                                    <div class="col-8">
                                                        <div class="callout callout-warning">
                                                            <div class="d-flex">
                                                                <div class=" flex-grow-1">
                                                                    <ul style="list-style-type: none;">
                                                                        @foreach (var dv in _action.DeviceList)
                                                                        {
                                                                            var objDv = LstDevice.Where(r => r.Id == dv).FirstOrDefault();
                                                                            <li>
                                                                                <span class="badge badge-pill badge-primary">
                                                                                    @objDv.Id
                                                                                </span>
                                                                                - [@objDv.Capabilitie] @objDv.Name
                                                                            </li>
                                                                        }
                                                                    </ul>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-12">
                                                        <hr class="dotted">
                                                    </div>

                                                    <div class="card col-12">
                                                        <div class="card-header">
                                                            <select title="-- Select Attributes --"
                                                                    data-style="btn-warning"
                                                                    class="form-control selectpicker"
                                                                    multiple
                                                                    required
                                                                    data-actions-box="true"
                                                                    data-live-search="true"
                                                                    id="slEditDeviceAttr-@_action.ActionId"
                                                                    @onchange=@(async()=> { await SelectAndBindMultiActionList(_action.SetValues);  })>
                                                                @{
                                                                    if (_dvType != String.Empty && _dvType != "" && _dvType != null)
                                                                    {
                                                                        var _lstAttrOfDvType = LstDeviceType.Where(r => r.Name == _dvType).FirstOrDefault().Attributes;
                                                                        foreach (var _attr in _lstAttrOfDvType)
                                                                        {
                                                                            <option value="@_attr">@_attr</option>
                                                                        }
                                                                    }
                                                                }
                                                            </select>
                                                        </div>
                                                        <div class="card-body">
                                                            <div class="row">

                                                                @{
                                                                    foreach (var _attr in _action.SetValues)
                                                                    {
                                                                        var _DetailOfAttr = LstAttribute.Where(r => r.Name == _attr.Key).FirstOrDefault();
                                                                        <div class="form-group col-4">
                                                                            <label>
                                                                                @_attr.Key
                                                                            </label>
                                                                            <div class="input-group ">
                                                                                @if (_DetailOfAttr.ValueType == SERVER_TYPES.Enum || _DetailOfAttr.ValueType == SERVER_TYPES.Array)
                                                                                {
                                                                                    <select title="-- Select --"
                                                                                            class="form-control selectpicker"
                                                                                            data-style="btn-light"
                                                                                            required
                                                                                            id=@("slEditAttrVal-" + _attr.Key+ "-" + _action.ActionId)
                                                                                            @onchange=@(async () => { var _tmpKeys = await SelectAndBindSingleTextReturn(); _action.SetValues[_attr.Key] = _tmpKeys; })>

                                                                                        @foreach (var _valRange in _DetailOfAttr.ValueRange)
                                                                                        {
                                                                                            <option value="@_valRange">
                                                                                                @_valRange
                                                                                            </option>
                                                                                        }
                                                                                    </select>
                                                                                }
                                                                                else if (_DetailOfAttr.ValueType == SERVER_TYPES.Double)
                                                                                {
                                                                                    <input class="form-control"
                                                                                           type="number"
                                                                                           @bind-value="@_action.SetValues[_attr.Key]"
                                                                                           required
                                                                                           step="0.01"
                                                                                           min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                           max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                                }
                                                                                else if (_DetailOfAttr.ValueType == SERVER_TYPES.String)
                                                                                {
                                                                                    <input class="form-control"
                                                                                           type="text"
                                                                                           @bind-value="@_action.SetValues[_attr.Key]" />
                                                                                }
                                                                                else if (_DetailOfAttr.ValueType == SERVER_TYPES.Integer)
                                                                                {
                                                                                    <input class="form-control"
                                                                                           type="number"
                                                                                           @bind-value="@_action.SetValues[_attr.Key]"
                                                                                           step="1"
                                                                                           required
                                                                                           min="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(0)"
                                                                                           max="@_DetailOfAttr.ValueRange.FirstOrDefault().Split(":").ToList().ElementAt(1)" />
                                                                                }
                                                                            </div>
                                                                        </div>
                                                                    }
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>
                                        }
                                    }
                                </fieldset>

                                @if (CurrentUser.Roles.Contains(Role.System))
                                {
                                    <fieldset class="border p-2">
                                        <legend class="w-auto">

                                            <div class="form-group">
                                                <div class="custom-control custom-switch">
                                                    <input type="checkbox"
                                                           id="swEditJsAction"
                                                           @bind-value="crEditSchedule.IsJavaScriptAction"
                                                           checked="@(crEditSchedule.IsJavaScriptAction?true:false)"
                                                           class="custom-control-input">
                                                    <label class="custom-control-label"
                                                           for="swEditJsAction">
                                                        Custom JavaScript Actions
                                                    </label>
                                                </div>
                                            </div>
                                        </legend>

                                        @if (crEditSchedule.IsJavaScriptAction)
                                        {
                                            <div class="form-group row">
                                                <label class="col-sm-2 col-form-label">
                                                    <i class="fas fa-user-edit"></i>
                                                    Custom JavaScript
                                                </label>
                                                <div class="col-sm-10">
                                                    <textarea class="summernote"
                                                              required=@(crEditSchedule.IsJavaScriptAction ? true : false)
                                                              id="tbEditJsAction"></textarea>
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <label class="col-sm-2 col-form-label"></label>
                                                <div class="col-sm-10">
                                                    <div class="d-flex justify-content-center">
                                                        <div class="btn-group btn-group-sm" role="group">
                                                            <button type="button" class="btn btn-primary">
                                                                Run
                                                            </button>

                                                            <button type="button" class="btn btn-danger">
                                                                Stop
                                                            </button>

                                                            <button type="button" class="btn btn-primary">
                                                                Reload Data
                                                            </button>

                                                            <button type="button" class="btn btn-primary">
                                                                Save
                                                            </button>

                                                            <button type="button" class="btn btn-primary">
                                                                Close
                                                            </button>

                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <label class="col-sm-2 col-form-label"></label>
                                                <div class="col-sm-10">
                                                    <textarea class="summernote"
                                                              required=@(crEditSchedule.IsJavaScriptAction ? true : false)
                                                              id="tbEditJsDebug">
                                        </textarea>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-warning" role="alert">
                                                Javascript Action is not in used
                                            </div>
                                        }
                                    </fieldset>
                                }
                            </form>
                        </div>

                        <div class="modal-footer d-flex justify-content-center">
                            <button type="button" class="btn btn-lg btn-secondary"
                                    data-dismiss="modal">
                                CLOSE
                            </button>
                            <button type="button"
                                    class="btn btn-lg btn-danger"
                                    @onclick=@(() => { DeleteItemHandle(crEditSchedule); })>
                                DELETE SCHEDULE
                            </button>
                            <button type="button"
                                    class="btn btn-lg btn-primary"
                                    @onclick=@(() => { FormEditSubmit(); })>
                                UPDATE SCHEDULE
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            @{
                if (flagForceSelectInject)
                {
                    InjectSelectAfterModal(true);
                    //Console.WriteLine("Inline Code");
                }
            }

        </div><!-- /.container-fluid -->
    </section>
    <!-- /.content -->
</div>

@code {
    public GlobalScheduleModel crEditSchedule = new GlobalScheduleModel();
    DateTimeOffset? crDatetimeBinding { get; set; }
    CloudUser CurrentUser = new CloudUser() { Infor = new UserInfor(), Roles = new List<Role>() };

    bool flagForceSelectInject = false;

    GlobalScheduleModel NewScheduleParams = new GlobalScheduleModel();
    List<GlobalScheduleModel> LstSchedule = new List<GlobalScheduleModel>();
    List<DeviceModel> LstDevice = new List<DeviceModel>();
    List<ZoneModel> LstZone = new List<ZoneModel>();
    List<SectionModel> LstSection = new List<SectionModel>();
    List<MasterDataModel> LstMasterData = new List<MasterDataModel>();
    List<MasterDataModel.DeviceTypeModel> LstDeviceType = new List<MasterDataModel.DeviceTypeModel>();
    List<MasterDataModel.AttributeModel> LstAttribute = new List<MasterDataModel.AttributeModel>();

    ElementReference elFormEditSchedule, elFormNewSchedule;
    enum DayOfWeek { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday }
    enum FormAction { AddRepeatDay, EditRepeatDay, NewTargetDevice, EditTargetDevice }

    ScheduleService svShedule = new ScheduleService();
    UserService svUser = new UserService();
    DeviceDataStore svDevice = new DeviceDataStore();
    LayoutAreaSevice svAreaLayout = new LayoutAreaSevice();
    MasterDataService svMasterData = new MasterDataService();
    string AccessToken = "";

    protected override async Task OnInitializedAsync()
    {
        AccessToken = await LocalStorage.GetItemAsync<string>("token");
        if (AccessToken == "")
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Please Sign In Again", false);
            NavHelper.NavigateTo("/login");
        }
        CurrentUser = await svUser.GetUserAllInforAsync(AccessToken);

        await RefetchData(true);

        // In case navigate from query string
        string queryScheduleId, queryDeviceId;
        if (NavigationHelper.TryGetQueryString<string>(NavHelper, "scheduleId", out queryScheduleId) && queryScheduleId != null && NavigationHelper.TryGetQueryString<string>(NavHelper, "deviceId", out queryDeviceId) && queryDeviceId != null)
        {
            var _objSchedule = await svShedule.GetScheduleAsync(Convert.ToInt32(queryScheduleId), AccessToken);

            await JSHelper.InvokeVoidAsync("Interop_ShowHideModal", "mdEditSchedule", "show");

            // because cardEdit-* id danh dau theo id cua element dau tien nen phai tim ra listDevice roi lay el dau >> jumptourl
            var _firtDvId = _objSchedule.Actions.Where(r => r.DeviceList.Contains(Convert.ToInt32(queryDeviceId))).FirstOrDefault()?.DeviceList.ElementAtOrDefault(0);
            await JSHelper.InvokeVoidAsync("Interop_GotoUrlAsync", "cardEdit-" + _firtDvId, 2000);

            InvokeAsync(StateHasChanged); // Error SelectBootstrap not load if not change state here
            PreEdit(_objSchedule);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (flagForceSelectInject)
        {
            InjectSelectAfterModal(false);
        }

        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbEditJsAction", 300, false, false);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbNewJsAction", 300, false, false);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbEditJsDebug", 200, false, false);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbNewJsDebug", 200, false, false);
        JSHelper.InvokeVoidAsync("Interop_PurgeBootstrapSelectCache"); //TODO: Test comment this line
        if (!firstRender)
        {
            return;
        }
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbEditJsAction", 300, true, false);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbNewJsAction", 300, true, false);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbEditJsDebug", 200, true, true);
        JSHelper.InvokeVoidAsync("Interop_InjectSummerNoteDefault", "tbNewJsDebug", 200, true, true);
        JSHelper.InvokeVoidAsync("Interop_InjectBootstrapSelect");
        JSHelper.InvokeVoidAsync("Interop_InjectBootstrapTable");

    }

    async Task RefetchData(bool isNoti)
    {
        if (isNoti) JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "Initializing Data\nPlease Wait ...");

        var taskLstSchedule = svShedule.GetItemsAsync(AccessToken);
        var taskLstDevice = svDevice.GetOwnerDevicesListAsync(AccessToken);
        var taskLstZone = svAreaLayout.GetZoneListAsync(AccessToken);
        var taskLstSection = svAreaLayout.GetSectionListAsync(AccessToken);
        var taskLstMasterData = svMasterData.GetMasterDataListAsync(AccessToken);
        var taskLstDeviceType = svMasterData.GetDeviceTypeListAsync(AccessToken);
        var taskLstAttribute = svMasterData.GetAttributeListAsync(AccessToken);

        await Task.WhenAll(taskLstSchedule, taskLstDevice, taskLstZone, taskLstSection, taskLstMasterData, taskLstDeviceType, taskLstAttribute);

        LstSchedule = await taskLstSchedule;
        LstDevice = await taskLstDevice;
        LstZone = await taskLstZone;
        LstSection = await taskLstSection;
        LstMasterData = await taskLstMasterData;
        LstDeviceType = await taskLstDeviceType;
        LstAttribute = await taskLstAttribute;

        if (isNoti) JSHelper.InvokeVoidAsync("Interop_Swal2spinner", false, "");

        InvokeAsync(StateHasChanged);
    }

    async Task ChangeScheduleStateHandle(GlobalScheduleModel _item)
    {
        var _objSchedule = _item.DeepCopy();
        _objSchedule.Enable = !_objSchedule.Enable;
        var result = await svShedule.UpdateItemAsync(_objSchedule, AccessToken);
        if (result)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "Schedule " + (_objSchedule.Enable ? "Enabled" : "Disabled"), true);

            RefetchData(false);
        }
        else
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Oops, Something Went Wrong", true);
        }
    }

    async Task DeleteItemHandle(GlobalScheduleModel _item)
    {
        var isConfirm = await JSHelper.InvokeAsync<bool>("Interop_Swal2HelperAsync", "warning", "This action cannot be undone", "DELETE THIS SCHEDULE", "#C70039", "Cancel", false);
        if (!isConfirm) return;

        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "");
        var result = await svShedule.DeleteScheduleAsync(_item.Id, AccessToken);
        if (result)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "Schedule Deleted", true);
            JSHelper.InvokeVoidAsync("Interop_ShowHideModal", "mdEditSchedule", "hide");

            RefetchData(true);
        }
        else
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Oops, Something Went Wrong", true);

        InvokeAsync(StateHasChanged);
    }

    async Task InjectSelectAfterModal(bool nextFlagState)
    {
        foreach (var _action in crEditSchedule.Actions)
        {
            JSHelper.InvokeVoidAsync("Interop_InjectBootstrapSelectionById", "slEditTargetDv-" + _action.ActionId, _action.DeviceList);
            JSHelper.InvokeVoidAsync("Interop_InjectBootstrapSelectionById", "slEditDeviceAttr-" + _action.ActionId, _action.SetValues.Select(r=>r.Key));
            foreach (var _attr in _action.SetValues)
            {
                JSHelper.InvokeVoidAsync("Interop_InjectBootstrapSelectionById", "slEditAttrVal-" + _attr.Key + "-"+ _action.ActionId, _attr.Value);
            }
        }
        flagForceSelectInject = nextFlagState;
    }

    async Task PreEdit(GlobalScheduleModel _item)
    {
        crEditSchedule = _item.DeepCopy();

        flagForceSelectInject = true;

        // Parse some value to correct format
        JSHelper.InvokeVoidAsync("Interop_InjectBootstrapSelectionById", "slEditScheduleType", (GlobalScheduleModel.ScheduleTypeEnum)crEditSchedule.ScheduleType);
        if (_item.ScheduleType == GlobalScheduleModel.ScheduleTypeEnum.Daily)
            JSHelper.InvokeVoidAsync("Interop_InjectBootstrapSelectionById", "slEditRepeat", crEditSchedule.RepeatDayOfWeek);
        JSHelper.InvokeVoidAsync("Interop_SummerSetCode", "tbEditJsAction", crEditSchedule.JavaScriptAction, 350);
        var txtDebug = svShedule.GetDebugAsync(crEditSchedule.Id, AccessToken);
        JSHelper.InvokeVoidAsync("Interop_SummerSetCode", "tbEditJsDebug", txtDebug, 200);
        var _tmpLocalConvert = UnixTime.UnixSecondToLocalTime(crEditSchedule.Time);
        crDatetimeBinding = DateTime.SpecifyKind(_tmpLocalConvert, DateTimeKind.Local);

        await JSHelper.InvokeVoidAsync("Interop_PurgeBootstrapSelectCache");
        JSHelper.InvokeVoidAsync("Interop_PurgeValidBtCache");
        await InvokeAsync(StateHasChanged);
    }

    async Task<string> SelectAndBindSingleTextReturn()
    {
        var _tmpSelectArr = await JSHelper.InvokeAsync<ArrayList>("Interop_DisplayChange");
        var slKeyItem = _tmpSelectArr[0];
        return await Task.FromResult(slKeyItem.ToString());
    }

    async Task<int> SelectAndBindSingle()
    {
        var _tmpSelectArr = await JSHelper.InvokeAsync<ArrayList>("Interop_DisplayChange");
        var slKeyItem = _tmpSelectArr[0];
        return await Task.FromResult(int.Parse(slKeyItem.ToString()));
    }

    private async Task SelectAndBindMultiActionList(Dictionary<string, string> refSetValues)
    {
        var _tmpSelectArr = await JSHelper.InvokeAsync<ArrayList>("Interop_DisplayChange");
        var ParseValue = _tmpSelectArr[0].ToString();
        if (_tmpSelectArr[1] == null) return; // some time random error here so this is fix
        var stateOfValue = bool.Parse(_tmpSelectArr[1].ToString());
        if (stateOfValue)
        {
            if (!refSetValues.ContainsKey(ParseValue)) refSetValues.Add(ParseValue, null);
        }
        else
        {
            if (refSetValues.ContainsKey(ParseValue)) refSetValues.Remove(ParseValue);
        }
        InvokeAsync(StateHasChanged);
    }

    private async void SelectAndBindMultiTargetDevice(RunningActionModel _refAction)
    {
        var _tmpSelectArr = await JSHelper.InvokeAsync<ArrayList>("Interop_DisplayChange");
        var ParseValue = int.Parse(_tmpSelectArr[0].ToString());
        if (_tmpSelectArr[1] == null) return; // some time random error here so this is fix
        var stateOfValue = bool.Parse(_tmpSelectArr[1].ToString());
        // ADD ITEM
        if (stateOfValue)
        {
            if (_refAction.DeviceList.Contains(ParseValue) == false) _refAction.DeviceList.Add(ParseValue);
        }
        // REMOVE ITEM
        else
        {
            if (_refAction.DeviceList.Contains(ParseValue) == true) _refAction.DeviceList.Remove(ParseValue);
        }
        InvokeAsync(StateHasChanged);
    }

    private async void SelectAndBindMulti(FormAction action)
    {
        var _tmpSelectArr = await JSHelper.InvokeAsync<ArrayList>("Interop_DisplayChange");
        var ParseValue = int.Parse(_tmpSelectArr[0].ToString());
        if (_tmpSelectArr[1] == null) return; // some time random error here so this is fix
        var stateOfValue = bool.Parse(_tmpSelectArr[1].ToString());
        // ADD ITEM
        if (stateOfValue)
        {
            if (action == FormAction.AddRepeatDay)
            {
                if (!NewScheduleParams.RepeatDayOfWeek.Contains(ParseValue))
                {
                    NewScheduleParams.RepeatDayOfWeek.Add(ParseValue);
                }
            }
            else if (action == FormAction.EditRepeatDay)
            {
                if (!crEditSchedule.RepeatDayOfWeek.Contains(ParseValue))
                {
                    crEditSchedule.RepeatDayOfWeek.Add(ParseValue);
                }
            }
        }
        // REMOVE ITEM
        else
        {
            if (action == FormAction.AddRepeatDay)
            {
                if (NewScheduleParams.RepeatDayOfWeek.Contains(ParseValue))
                {
                    NewScheduleParams.RepeatDayOfWeek.Remove(ParseValue);
                }
            }
            else if (action == FormAction.EditRepeatDay)
            {
                if (crEditSchedule.RepeatDayOfWeek.Contains(ParseValue))
                {
                    crEditSchedule.RepeatDayOfWeek.Remove(ParseValue);
                }
            }
        }
    }

    async Task FormNewSubmit()
    {
        var isFormValid = await JSHelper.InvokeAsync<bool>("Interop_FormValidate", elFormNewSchedule);
        if (!isFormValid)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "warning", "Please fill all required field", true);
            return;
        }

        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "");

        // Convert Some Prop to correct format
        if (NewScheduleParams.ScheduleType != GlobalScheduleModel.ScheduleTypeEnum.IntervalTime)
        {
            NewScheduleParams.Time = crDatetimeBinding.Value.ToUnixTimeSeconds();
        }
        if (NewScheduleParams.IsJavaScriptAction)
        {
            NewScheduleParams.JavaScriptAction = await JSHelper.InvokeAsync<string>("Interop_SummerGetCode", "tbNewJsAction");
        }

        var resultDvId = await svShedule.InsertItemAsync(NewScheduleParams, AccessToken);
        if (resultDvId == -1)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Some thing went wrong", false);
            return;
        }
        JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "Device Id <strong>" + resultDvId.ToString() + "</strong> Added", false);
        JSHelper.InvokeVoidAsync("Interop_ShowHideModal", "mdNewSchedule", "hide");

        RefetchData(false);
    }

    async Task FormEditSubmit()
    {
        var isFormValid = await JSHelper.InvokeAsync<bool>("Interop_FormValidate", elFormEditSchedule);
        if (!isFormValid)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "warning", "Please fill all required field", true);
            return;
        }

        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "");

        // Convert Some Prop to correct format
        if (crEditSchedule.ScheduleType != GlobalScheduleModel.ScheduleTypeEnum.IntervalTime)
        {
            crEditSchedule.Time = crDatetimeBinding.Value.ToUnixTimeSeconds();
        }
        if (crEditSchedule.IsJavaScriptAction)
        {
            crEditSchedule.JavaScriptAction = await JSHelper.InvokeAsync<string>("Interop_SummerGetCode", "tbEditJsAction");
        }
        var isOk = await svShedule.UpdateItemAsync(crEditSchedule, AccessToken);
        if (isOk)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "Schedule Updated", true);
            JSHelper.InvokeVoidAsync("Interop_ShowHideModal", "mdEditSchedule", "hide");
        }
        else
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Oops, Something Went Wrong", true);

        RefetchData(false);
    }
}