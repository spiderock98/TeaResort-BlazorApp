@page "/layout_area"
@inject IJSRuntime JSHelper
@using SmartRetail.Client.Services
@using Newtonsoft.Json
@using Helper
@using Share.Models
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavHelper
@using System.Collections


<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col text-center">
                    <h1 style="font-size:50px;">Layout Area</h1>
                </div>
            </div><!-- /.row -->
        </div><!-- /.container-fluid -->
    </section>
    <!-- /.content-header -->
    <!-- Main content -->
    <section class="content">
        <div class="container-fluid">

            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircle" Color="Color.Success" data-toggle="modal"
                       data-target="#mdNewArea" @onclick="PreNew">
                NEW AREA
            </MudButton>

            @*<table class="bootstrap-table"
               data-search="false"
               data-show-export="true"
               data-click-to-select="true"
               data-search-align="right"
               data-buttons-align="right">
            <thead>
                <tr class="text-center">
                    <th>ID</th>
                    <th>NAME</th>
                    <th>ACTIONS</th>
                </tr>
            </thead>
            <tbody>
                @{
                    foreach (var _area in LstAllArea.OrderByDescending(r => r.Id))
                    {
                        <tr class="text-center">
                            <th>@_area.Id</th>
                            <td>@_area.Name</td>
                            <td>
                                <div class="d-flex justify-content-center flex-wrap">
                                    <button type="button"
                                            data-target="#mdEditArea"
                                            data-toggle="modal"
                                            class="btn btn-xs btn-warning m-1"
                                            @onclick=@(() => { PreEdit(_area); })>
                                        <i class="fas fa-pen"></i>
                                    </button>

                                    <button data-toggle="tooltip"
                                            data-placement="top"
                                            title="Delete"
                                            class="btn btn-xs btn-danger m-1"
                                            @onclick=@(() => { ModalInfoHandle(_area, ModalType.Delete); })>
                                        <i class="fas fa-trash"></i>
                                    </button>

                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>*@


        <MudTable Hover=true
                  @ref="table"
                  ServerData="@(new Func<TableState, Task<TableData<AreaModel>>>(ServerReload))">
            <ToolBarContent>
                <MudText Typo="Typo.h6">List All Area</MudText>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>

            <HeaderContent>
                <MudTh Style="text-align:center;"><MudTableSortLabel InitialDirection="SortDirection.Descending" SortLabel="id_field" T="AreaModel">No.</MudTableSortLabel></MudTh>
                <MudTh Style="text-align:center;"><MudTableSortLabel SortLabel="name_field" T="AreaModel">NAME</MudTableSortLabel></MudTh>
                <MudTh Style="text-align:center;"></MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd Style="text-align:center;" DataLabel="ID">@context.Id</MudTd>
                <MudTd Style="text-align:center;" DataLabel="NAME">@context.Name</MudTd>
                <MudTd Style="text-align:center;">


                    <MudButtonGroup Size="Size.Small"
                                    Color="Color.Default"
                                    Variant="Variant.Text">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       data-toggle="modal"
                                       data-target="#mdEditArea"
                                       OnClick=@(() => { PreEdit(context); })></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.DeleteSweep"
                                       Color="Color.Error"
                                       OnClick=@(() => { ModalInfoHandle(context, ModalType.Delete); })>
                        </MudIconButton>
                    </MudButtonGroup>

                    <MudMenu Icon="@Icons.Material.Filled.MoreVert"
                             ActivationEvent="MouseEvent.MouseOver">
                        <MudMenuItem>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           data-toggle="modal"
                                           data-target="#mdEditArea"
                                           OnClick=@(() => { PreEdit(context); })></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.DeleteSweep"
                                           Color="Color.Error"
                                           OnClick=@(() => { ModalInfoHandle(context, ModalType.Delete); })></MudIconButton>
                        </MudMenuItem>
                    </MudMenu>

                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>

            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>


        </div>
    </section>
    <!-- /.content -->
</div>

<!-- Modal Edit Area -->
<div class="modal animate__animated animate__bounceInUp" data-backdrop="static" id="mdEditArea" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered justify-content-center ">
        <div class="modal-content">
            <div class="modal-header bg-info text-white d-flex justify-content-center flex-column text-center">
                <h1 class="modal-title w-100">
                    <i class="fas fa-cogs"></i>
                </h1>
                <h2 class="modal-title w-100">
                    Edit Area
                </h2>
            </div>
            <div class="modal-body">
                <form @ref="elFormEdit">
                    <div class="row">
                        <div class="input-group mb-3 col-12">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="fas fa-id-card"></i>
                                </span>
                            </div>
                            <input class="form-control"
                                   type="text"
                                   @bind-value="@CrEditArea.Name"
                                   placeholder="Room Name"
                                   required />
                        </div>
                    </div>

                    @foreach (var _zone in LstAllZone.Where(r => r.Area == CrEditArea.Id).ToList())
                    {
                        <div class="alert alert-light d-flex" role="alert">
                            <div class="flex-grow-1">
                                <span class="badge badge-success">
                                    <h5>@_zone.Name</h5>
                                </span>
                            </div>
                            <button class="btn btn-outline-success mr-1"
                                    type="button"
                                    @onclick=@(()=> { DetachZone(_zone); })>
                                <i class="fas fa-unlock-alt"></i>
                                Detach
                            </button>
                            <button class="btn btn-outline-success ml-1"
                                    type="button">
                                <i class="fas fa-external-link-alt"></i>
                            </button>
                        </div>
                    }
                </form>
            </div>
            <div class="modal-footer d-flex justify-content-center">
                <button type="button"
                        class="btn btn-outline-info"
                        data-dismiss="modal"
                        @onclick="PreCloseModalEdit">
                    Cancle
                </button>
                <button type="button"
                        class="btn btn-info"
                        @onclick=@(()=> { ModalSubmit(ModalType.Edit); })>
                    Save Change
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal New Area -->
<div class="modal animate__animated animate__bounceInUp" data-backdrop="static" id="mdNewArea" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered justify-content-center">
        <div class="modal-content">
            <div class="modal-header bg-info text-white d-flex justify-content-center flex-column text-center">
                <h1 class="modal-title w-100">
                    <i class="fas fa-folder-plus"></i>
                </h1>
                <h2 class="modal-title w-100">
                    New Area Layout
                </h2>
            </div>
            <div class="modal-body">
                <form @ref="elFormNew">
                    <div class="row">
                        <div class="input-group mb-3 col-12">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="fas fa-id-card"></i>
                                </span>
                            </div>
                            <input class="form-control"
                                   type="text"
                                   @bind-value="@NewAreaParam.Name"
                                   placeholder="Area Name"
                                   required />
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer d-flex justify-content-center">
                <button type="button"
                        class="btn btn-outline-info"
                        data-dismiss="modal">
                    Cancle
                </button>
                <button type="button"
                        class="btn btn-info"
                        @onclick=@(()=> { ModalSubmit(ModalType.Create); })>
                    Create
                </button>
            </div>
        </div>
    </div>
</div>


@code {
    enum ModalType { Create, Edit, Delete }
    ElementReference elFormNew, elFormEdit;
    string AccessToken = "";
    string mudFilterMain = "";

    AreaModel NewAreaParam = new AreaModel();
    AreaModel CrEditArea = new AreaModel();

    List<AreaModel> LstAllArea = new List<AreaModel>();
    List<ZoneModel> LstAllZone = new List<ZoneModel>();
    List<SectionModel> LstAllSection = new List<SectionModel>();

    LayoutAreaSevice svLayout = new LayoutAreaSevice();

    protected override async Task OnInitializedAsync()
    {
        AccessToken = await LocalStorage.GetItemAsync<string>("token");
        if (AccessToken == "")
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Please Sign In Again", false);
            NavHelper.NavigateTo("/login");
        }

        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "Initializing Data\nPlease Wait ...");
        LstAllArea = await svLayout.GetAreaListAsync(AccessToken);
        LstAllZone = await svLayout.GetZoneListAsync(AccessToken);
        LstAllSection = await svLayout.GetSectionListAsync(AccessToken);
        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", false, "");

        // In case navigate from query string
        string queryAreaId;
        if (NavigationHelper.TryGetQueryString<string>(NavHelper, "AreaId", out queryAreaId) && queryAreaId != null)
        {
            var _objArea = LstAllArea.Where(r => r.Id == Convert.ToInt32(queryAreaId)).FirstOrDefault();
            if (_objArea == default) return;

            await JSHelper.InvokeVoidAsync("Interop_ShowHideModal", "mdEditArea", "show");

            InvokeAsync(StateHasChanged); // Error SelectBootstrap not load if not change state here
            PreEdit(_objArea);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        JSHelper.InvokeVoidAsync("Interop_PurgeBootstrapSelectCache");

        if (!firstRender)
        {
            return;
        }
        //JSHelper.InvokeVoidAsync("OneTimeEventHandle");
        JSHelper.InvokeVoidAsync("Interop_InjectBootstrapSelect");
        JSHelper.InvokeVoidAsync("Interop_InjectBootstrapTable");
    }




    private MudTable<AreaModel> table;
    private int totalItems;
    private List<AreaModel> pagedData;
    private async Task<TableData<AreaModel>> ServerReload(TableState state)
    {
        var data = await svLayout.GetAreaListAsync(AccessToken);
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(mudFilterMain))
                return true;
            if (element.Id.ToString().Contains(mudFilterMain))
                return true;
            if (element.Name.Contains(mudFilterMain))
                return true;
            return false;
        }).ToList();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "id_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Id).ToList();
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Name).ToList();
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
        return new TableData<AreaModel>() { TotalItems = totalItems, Items = pagedData };
    }
    private void OnSearch(string text)
    {
        mudFilterMain = text;
        table.ReloadServerData();
    }




    private bool FilterFunc(AreaModel element)
    {
        if (string.IsNullOrWhiteSpace(mudFilterMain))
            return true;
        if (element.Id.ToString().Contains(mudFilterMain))
            return true;
        if (element.Name.Contains(mudFilterMain))
            return true;
        return false;
    }

    async Task<int> SelectAndBindSingleInt()
    {
        var _tmpSelectArr = await JSHelper.InvokeAsync<ArrayList>("Interop_DisplayChange");
        var slKeyItem = _tmpSelectArr[0];
        return await Task.FromResult(int.Parse(slKeyItem.ToString()));
    }

    async Task DetachAllZoneInArea(AreaModel _area)
    {
        // get all zone belong to area then detach all
        var _crLstZoneAssignedToArea = LstAllZone.Where(r => r.Area == _area.Id).ToList();
        var isAllOk = true;
        foreach (var _zone in _crLstZoneAssignedToArea)
        {
            _zone.Area = -1;
            var _isThisOk = await svLayout.UpdateZoneAsync(_zone, AccessToken);
            if (_isThisOk == false) isAllOk = false;
        }
        if (isAllOk)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "All zones of this area has been detached", true);
        }
        else
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Oops, Something went wrong", true);
        }
        LstAllZone = await svLayout.GetZoneListAsync(AccessToken);
    }

    async Task DetachZone(ZoneModel _zone)
    {
        _zone.Area = -1;
        var isOk = await svLayout.UpdateZoneAsync(_zone, AccessToken);
        if (isOk)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "Item detached", true);
        }
        else
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Oops, Something went wrong", true);
        }
        // Re fetch all List
        //LstAllArea = await svLayout.GetAreaListAsync(AccessToken);
        LstAllZone = await svLayout.GetZoneListAsync(AccessToken);
        //LstAllSection = await svLayout.GetSectionListAsync(AccessToken);
        //LstAllDevice = await svDevice.GetOwnerDevicesListAsync(AccessToken);
        //LstAllUnAssigedSection = LstAllSection.Where(r => r.Zone == -1).ToList();

        InvokeAsync(StateHasChanged);
    }

    async Task ModalSubmit(ModalType submitType)
    {
        var isFormValid = await JSHelper.InvokeAsync<bool>("Interop_FormValidate", submitType == ModalType.Create ? elFormNew : elFormEdit);
        if (!isFormValid)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "warning", "Please fill all required field", true);
            return;
        }
        JSHelper.InvokeVoidAsync("Interop_Swal2spinner", true, "");
        var isOk = false;
        if (submitType == ModalType.Create)
        {
            isOk = await svLayout.InsertAreaAsync(NewAreaParam, AccessToken);
        }
        else if (submitType == ModalType.Edit)
        {
            isOk = await svLayout.UpdateAreaAsync(CrEditArea, AccessToken);
        }
        // check response
        if (isOk)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "Item " + (submitType == ModalType.Create ? "Added" : "Updated"), true);
        }
        else
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Oops, Something went wrong", true);
        }
        JSHelper.InvokeVoidAsync("Interop_PurgeAllCache");
        JSHelper.InvokeVoidAsync("Interop_ShowHideModal", submitType == ModalType.Create ? "mdNewArea" : "mdEditArea", "hide");
        // Re fetch all List
        LstAllArea = await svLayout.GetAreaListAsync(AccessToken);

        table.ReloadServerData();

        InvokeAsync(StateHasChanged);
    }

    async Task ModalInfoHandle(AreaModel _area, ModalType action)
    {
        string InputAreaName = "";
        // Pre Validate
        if (action == ModalType.Delete)
        {
            var isConfirm = await JSHelper.InvokeAsync<bool>("Interop_Swal2HelperAsync", "warning", "This action cannot be undone", "DELETE AREA " + _area.Name, "#C70039", "Cancel", false);
            if (!isConfirm) return;
        }
        else
        {
            InputAreaName = await JSHelper.InvokeAsync<string>("Interop_Swal2InputAsync", "text", "Area Name", _area.Name, action == ModalType.Edit ? "Save Changed" : "Create");
            if (InputAreaName == "") return;
            _area.Name = InputAreaName;
        }

        // Request to server
        var isOk = false;
        if (action == ModalType.Create)
        {
            isOk = await svLayout.InsertAreaAsync(_area, AccessToken);
        }
        else if (action == ModalType.Edit)
        {
            isOk = await svLayout.UpdateAreaAsync(_area, AccessToken);
        }
        else if (action == ModalType.Delete)
        {
            isOk = await svLayout.DeleteAreaAsync(_area.Id, AccessToken);
            DetachAllZoneInArea(_area);
        }

        // check response
        if (isOk)
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "success", "Item changed", true);
        }
        else
        {
            JSHelper.InvokeVoidAsync("Interop_Swal2Helper", "error", "Oops, Something went wrong", true);
        }

        // Re fetch all List
        LstAllArea = await svLayout.GetAreaListAsync(AccessToken);

        table.ReloadServerData();
        InvokeAsync(StateHasChanged);
    }

    async Task PreCloseModalEdit()
    {
        JSHelper.InvokeVoidAsync("Interop_PurgeAllCache");
    }
    async Task PreNew()
    {
        NewAreaParam = new AreaModel();
        InvokeAsync(StateHasChanged);
    }

    async Task PreEdit(AreaModel _area)
    {
        CrEditArea = _area.DeepCopy();
        await InvokeAsync(StateHasChanged);
    }
}